{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = require(\"react\");\n\nconst xterm_1 = require(\"xterm\");\n\nexports.Terminal = xterm_1.Terminal;\n\nconst className = require('classnames');\n\nclass XTerm extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.onInput = data => {\n      this.props.onInput && this.props.onInput(data);\n    };\n\n    this.state = {\n      isFocused: false\n    };\n  }\n\n  applyAddon(addon) {\n    xterm_1.Terminal.applyAddon(addon);\n  }\n\n  componentDidMount() {\n    if (this.props.addons) {\n      this.props.addons.forEach(s => {\n        const addon = require(\"xterm/dist/addons/\".concat(s, \"/\").concat(s));\n\n        xterm_1.Terminal.applyAddon(addon);\n      });\n    }\n\n    this.xterm = new xterm_1.Terminal(this.props.options);\n    this.xterm.open(this.refs.container);\n    this.xterm.on('focus', this.focusChanged.bind(this, true));\n    this.xterm.on('blur', this.focusChanged.bind(this, false));\n\n    if (this.props.onContextMenu) {\n      this.xterm.element.addEventListener('contextmenu', this.onContextMenu.bind(this));\n    }\n\n    if (this.props.onInput) {\n      this.xterm.on('data', this.onInput);\n    }\n\n    if (this.props.value) {\n      this.xterm.write(this.props.value);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.xterm) {\n      this.xterm.destroy();\n      this.xterm = null;\n    }\n  }\n\n  getTerminal() {\n    return this.xterm;\n  }\n\n  write(data) {\n    this.xterm.write(data);\n  }\n\n  writeln(data) {\n    this.xterm.writeln(data);\n  }\n\n  focus() {\n    if (this.xterm) {\n      this.xterm.focus();\n    }\n  }\n\n  focusChanged(focused) {\n    this.setState({\n      isFocused: focused\n    });\n    this.props.onFocusChange && this.props.onFocusChange(focused);\n  }\n\n  resize(cols, rows) {\n    this.xterm.resize(Math.round(cols), Math.round(rows));\n  }\n\n  setOption(key, value) {\n    this.xterm.setOption(key, value);\n  }\n\n  refresh() {\n    this.xterm.refresh(0, this.xterm.rows - 1);\n  }\n\n  onContextMenu(e) {\n    this.props.onContextMenu && this.props.onContextMenu(e);\n  }\n\n  render() {\n    const terminalClassName = className('ReactXTerm', this.state.isFocused ? 'ReactXTerm--focused' : null, this.props.className);\n    return React.createElement(\"div\", {\n      ref: \"container\",\n      className: terminalClassName\n    });\n  }\n\n}\n\nexports.default = XTerm;\nexports.XTerm = XTerm;","map":null,"metadata":{},"sourceType":"script"}