{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Browser_1 = require(\"./utils/Browser\");\n\nexports.CHAR_ATLAS_CELL_SPACING = 1;\n\nfunction generateCharAtlas(context, canvasFactory, request) {\n  var cellWidth = request.scaledCharWidth + exports.CHAR_ATLAS_CELL_SPACING;\n  var cellHeight = request.scaledCharHeight + exports.CHAR_ATLAS_CELL_SPACING;\n  var canvas = canvasFactory(255 * cellWidth, (2 + 16) * cellHeight);\n  var ctx = canvas.getContext('2d', {\n    alpha: request.allowTransparency\n  });\n  ctx.fillStyle = request.background;\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  ctx.save();\n  ctx.fillStyle = request.foreground;\n  ctx.font = getFont(request.fontWeight, request);\n  ctx.textBaseline = 'top';\n\n  for (var i = 0; i < 256; i++) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(i * cellWidth, 0, cellWidth, cellHeight);\n    ctx.clip();\n    ctx.fillText(String.fromCharCode(i), i * cellWidth, 0);\n    ctx.restore();\n  }\n\n  ctx.save();\n  ctx.font = getFont(request.fontWeightBold, request);\n\n  for (var i = 0; i < 256; i++) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(i * cellWidth, cellHeight, cellWidth, cellHeight);\n    ctx.clip();\n    ctx.fillText(String.fromCharCode(i), i * cellWidth, cellHeight);\n    ctx.restore();\n  }\n\n  ctx.restore();\n  ctx.font = getFont(request.fontWeight, request);\n\n  for (var colorIndex = 0; colorIndex < 16; colorIndex++) {\n    if (colorIndex === 8) {\n      ctx.font = getFont(request.fontWeightBold, request);\n    }\n\n    var y = (colorIndex + 2) * cellHeight;\n\n    for (var i = 0; i < 256; i++) {\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(i * cellWidth, y, cellWidth, cellHeight);\n      ctx.clip();\n      ctx.fillStyle = request.ansiColors[colorIndex];\n      ctx.fillText(String.fromCharCode(i), i * cellWidth, y);\n      ctx.restore();\n    }\n  }\n\n  ctx.restore();\n\n  if (!('createImageBitmap' in context) || Browser_1.isFirefox) {\n    if (canvas instanceof HTMLCanvasElement) {\n      return canvas;\n    } else {\n      return new Promise(function (r) {\n        return r(canvas.transferToImageBitmap());\n      });\n    }\n  }\n\n  var charAtlasImageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n  var r = parseInt(request.background.substr(1, 2), 16);\n  var g = parseInt(request.background.substr(3, 2), 16);\n  var b = parseInt(request.background.substr(5, 2), 16);\n  clearColor(charAtlasImageData, r, g, b);\n  return context.createImageBitmap(charAtlasImageData);\n}\n\nexports.generateCharAtlas = generateCharAtlas;\n\nfunction clearColor(imageData, r, g, b) {\n  for (var offset = 0; offset < imageData.data.length; offset += 4) {\n    if (imageData.data[offset] === r && imageData.data[offset + 1] === g && imageData.data[offset + 2] === b) {\n      imageData.data[offset + 3] = 0;\n    }\n  }\n}\n\nfunction getFont(fontWeight, request) {\n  return fontWeight + \" \" + request.fontSize * request.devicePixelRatio + \"px \" + request.fontFamily;\n}","map":null,"metadata":{},"sourceType":"script"}