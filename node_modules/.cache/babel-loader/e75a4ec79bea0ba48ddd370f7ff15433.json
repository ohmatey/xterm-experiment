{"ast":null,"code":"(function (f) {\n  if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n    module.exports = f();\n  } else if (typeof define === \"function\" && define.amd) {\n    define([], f);\n  } else {\n    var g;\n\n    if (typeof window !== \"undefined\") {\n      g = window;\n    } else if (typeof global !== \"undefined\") {\n      g = global;\n    } else if (typeof self !== \"undefined\") {\n      g = self;\n    } else {\n      g = this;\n    }\n\n    g.terminado = f();\n  }\n})(function () {\n  var define, module, exports;\n  return function e(t, n, r) {\n    function s(o, u) {\n      if (!n[o]) {\n        if (!t[o]) {\n          var a = typeof require == \"function\" && require;\n          if (!u && a) return a(o, !0);\n          if (i) return i(o, !0);\n          var f = new Error(\"Cannot find module '\" + o + \"'\");\n          throw f.code = \"MODULE_NOT_FOUND\", f;\n        }\n\n        var l = n[o] = {\n          exports: {}\n        };\n        t[o][0].call(l.exports, function (e) {\n          var n = t[o][1][e];\n          return s(n ? n : e);\n        }, l, l.exports, e, t, n, r);\n      }\n\n      return n[o].exports;\n    }\n\n    var i = typeof require == \"function\" && require;\n\n    for (var o = 0; o < r.length; o++) s(r[o]);\n\n    return s;\n  }({\n    1: [function (require, module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      function terminadoAttach(term, socket, bidirectional, buffered) {\n        var addonTerminal = term;\n        bidirectional = typeof bidirectional === 'undefined' ? true : bidirectional;\n        addonTerminal.__socket = socket;\n\n        addonTerminal.__flushBuffer = function () {\n          addonTerminal.write(addonTerminal.__attachSocketBuffer);\n          addonTerminal.__attachSocketBuffer = null;\n        };\n\n        addonTerminal.__pushToBuffer = function (data) {\n          if (addonTerminal.__attachSocketBuffer) {\n            addonTerminal.__attachSocketBuffer += data;\n          } else {\n            addonTerminal.__attachSocketBuffer = data;\n            setTimeout(addonTerminal.__flushBuffer, 10);\n          }\n        };\n\n        addonTerminal.__getMessage = function (ev) {\n          var data = JSON.parse(ev.data);\n\n          if (data[0] === 'stdout') {\n            if (buffered) {\n              addonTerminal.__pushToBuffer(data[1]);\n            } else {\n              addonTerminal.write(data[1]);\n            }\n          }\n        };\n\n        addonTerminal.__sendData = function (data) {\n          socket.send(JSON.stringify(['stdin', data]));\n        };\n\n        addonTerminal.__setSize = function (size) {\n          socket.send(JSON.stringify(['set_size', size.rows, size.cols]));\n        };\n\n        socket.addEventListener('message', addonTerminal.__getMessage);\n\n        if (bidirectional) {\n          addonTerminal.on('data', addonTerminal.__sendData);\n        }\n\n        addonTerminal.on('resize', addonTerminal.__setSize);\n        socket.addEventListener('close', function () {\n          return terminadoDetach(addonTerminal, socket);\n        });\n        socket.addEventListener('error', function () {\n          return terminadoDetach(addonTerminal, socket);\n        });\n      }\n\n      exports.terminadoAttach = terminadoAttach;\n\n      function terminadoDetach(term, socket) {\n        var addonTerminal = term;\n        addonTerminal.off('data', addonTerminal.__sendData);\n        socket = typeof socket === 'undefined' ? addonTerminal.__socket : socket;\n\n        if (socket) {\n          socket.removeEventListener('message', addonTerminal.__getMessage);\n        }\n\n        delete addonTerminal.__socket;\n      }\n\n      exports.terminadoDetach = terminadoDetach;\n\n      function apply(terminalConstructor) {\n        terminalConstructor.prototype.terminadoAttach = function (socket, bidirectional, buffered) {\n          return terminadoAttach(this, socket, bidirectional, buffered);\n        };\n\n        terminalConstructor.prototype.terminadoDetach = function (socket) {\n          return terminadoDetach(this, socket);\n        };\n      }\n\n      exports.apply = apply;\n    }, {}]\n  }, {}, [1])(1);\n});","map":null,"metadata":{},"sourceType":"script"}