{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar EscapeSequences_1 = require(\"./EscapeSequences\");\n\nvar Charsets_1 = require(\"./Charsets\");\n\nvar normalStateHandler = {};\n\nnormalStateHandler[EscapeSequences_1.C0.BEL] = function (parser, handler) {\n  return handler.bell();\n};\n\nnormalStateHandler[EscapeSequences_1.C0.LF] = function (parser, handler) {\n  return handler.lineFeed();\n};\n\nnormalStateHandler[EscapeSequences_1.C0.VT] = normalStateHandler[EscapeSequences_1.C0.LF];\nnormalStateHandler[EscapeSequences_1.C0.FF] = normalStateHandler[EscapeSequences_1.C0.LF];\n\nnormalStateHandler[EscapeSequences_1.C0.CR] = function (parser, handler) {\n  return handler.carriageReturn();\n};\n\nnormalStateHandler[EscapeSequences_1.C0.BS] = function (parser, handler) {\n  return handler.backspace();\n};\n\nnormalStateHandler[EscapeSequences_1.C0.HT] = function (parser, handler) {\n  return handler.tab();\n};\n\nnormalStateHandler[EscapeSequences_1.C0.SO] = function (parser, handler) {\n  return handler.shiftOut();\n};\n\nnormalStateHandler[EscapeSequences_1.C0.SI] = function (parser, handler) {\n  return handler.shiftIn();\n};\n\nnormalStateHandler[EscapeSequences_1.C0.ESC] = function (parser, handler) {\n  return parser.setState(ParserState.ESCAPED);\n};\n\nvar escapedStateHandler = {};\n\nescapedStateHandler['['] = function (parser, terminal) {\n  terminal.params = [];\n  terminal.currentParam = 0;\n  parser.setState(ParserState.CSI_PARAM);\n};\n\nescapedStateHandler[']'] = function (parser, terminal) {\n  terminal.params = [];\n  terminal.currentParam = 0;\n  parser.setState(ParserState.OSC);\n};\n\nescapedStateHandler['P'] = function (parser, terminal) {\n  terminal.params = [];\n  terminal.currentParam = 0;\n  parser.setState(ParserState.DCS);\n};\n\nescapedStateHandler['_'] = function (parser, terminal) {\n  parser.setState(ParserState.IGNORE);\n};\n\nescapedStateHandler['^'] = function (parser, terminal) {\n  parser.setState(ParserState.IGNORE);\n};\n\nescapedStateHandler['c'] = function (parser, terminal) {\n  terminal.reset();\n};\n\nescapedStateHandler['E'] = function (parser, terminal) {\n  terminal.buffer.x = 0;\n  terminal.index();\n  parser.setState(ParserState.NORMAL);\n};\n\nescapedStateHandler['D'] = function (parser, terminal) {\n  terminal.index();\n  parser.setState(ParserState.NORMAL);\n};\n\nescapedStateHandler['M'] = function (parser, terminal) {\n  terminal.reverseIndex();\n  parser.setState(ParserState.NORMAL);\n};\n\nescapedStateHandler['%'] = function (parser, terminal) {\n  terminal.setgLevel(0);\n  terminal.setgCharset(0, Charsets_1.DEFAULT_CHARSET);\n  parser.setState(ParserState.NORMAL);\n  parser.skipNextChar();\n};\n\nescapedStateHandler[EscapeSequences_1.C0.CAN] = function (parser) {\n  return parser.setState(ParserState.NORMAL);\n};\n\nvar csiParamStateHandler = {};\n\ncsiParamStateHandler['?'] = function (parser) {\n  return parser.setPrefix('?');\n};\n\ncsiParamStateHandler['>'] = function (parser) {\n  return parser.setPrefix('>');\n};\n\ncsiParamStateHandler['!'] = function (parser) {\n  return parser.setPrefix('!');\n};\n\ncsiParamStateHandler['0'] = function (parser) {\n  return parser.setParam(parser.getParam() * 10);\n};\n\ncsiParamStateHandler['1'] = function (parser) {\n  return parser.setParam(parser.getParam() * 10 + 1);\n};\n\ncsiParamStateHandler['2'] = function (parser) {\n  return parser.setParam(parser.getParam() * 10 + 2);\n};\n\ncsiParamStateHandler['3'] = function (parser) {\n  return parser.setParam(parser.getParam() * 10 + 3);\n};\n\ncsiParamStateHandler['4'] = function (parser) {\n  return parser.setParam(parser.getParam() * 10 + 4);\n};\n\ncsiParamStateHandler['5'] = function (parser) {\n  return parser.setParam(parser.getParam() * 10 + 5);\n};\n\ncsiParamStateHandler['6'] = function (parser) {\n  return parser.setParam(parser.getParam() * 10 + 6);\n};\n\ncsiParamStateHandler['7'] = function (parser) {\n  return parser.setParam(parser.getParam() * 10 + 7);\n};\n\ncsiParamStateHandler['8'] = function (parser) {\n  return parser.setParam(parser.getParam() * 10 + 8);\n};\n\ncsiParamStateHandler['9'] = function (parser) {\n  return parser.setParam(parser.getParam() * 10 + 9);\n};\n\ncsiParamStateHandler['$'] = function (parser) {\n  return parser.setPostfix('$');\n};\n\ncsiParamStateHandler['\"'] = function (parser) {\n  return parser.setPostfix('\"');\n};\n\ncsiParamStateHandler[' '] = function (parser) {\n  return parser.setPostfix(' ');\n};\n\ncsiParamStateHandler['\\''] = function (parser) {\n  return parser.setPostfix('\\'');\n};\n\ncsiParamStateHandler[';'] = function (parser) {\n  return parser.finalizeParam();\n};\n\ncsiParamStateHandler[EscapeSequences_1.C0.CAN] = function (parser) {\n  return parser.setState(ParserState.NORMAL);\n};\n\nvar csiStateHandler = {};\n\ncsiStateHandler['@'] = function (handler, params, prefix) {\n  return handler.insertChars(params);\n};\n\ncsiStateHandler['A'] = function (handler, params, prefix) {\n  return handler.cursorUp(params);\n};\n\ncsiStateHandler['B'] = function (handler, params, prefix) {\n  return handler.cursorDown(params);\n};\n\ncsiStateHandler['C'] = function (handler, params, prefix) {\n  return handler.cursorForward(params);\n};\n\ncsiStateHandler['D'] = function (handler, params, prefix) {\n  return handler.cursorBackward(params);\n};\n\ncsiStateHandler['E'] = function (handler, params, prefix) {\n  return handler.cursorNextLine(params);\n};\n\ncsiStateHandler['F'] = function (handler, params, prefix) {\n  return handler.cursorPrecedingLine(params);\n};\n\ncsiStateHandler['G'] = function (handler, params, prefix) {\n  return handler.cursorCharAbsolute(params);\n};\n\ncsiStateHandler['H'] = function (handler, params, prefix) {\n  return handler.cursorPosition(params);\n};\n\ncsiStateHandler['I'] = function (handler, params, prefix) {\n  return handler.cursorForwardTab(params);\n};\n\ncsiStateHandler['J'] = function (handler, params, prefix) {\n  return handler.eraseInDisplay(params);\n};\n\ncsiStateHandler['K'] = function (handler, params, prefix) {\n  return handler.eraseInLine(params);\n};\n\ncsiStateHandler['L'] = function (handler, params, prefix) {\n  return handler.insertLines(params);\n};\n\ncsiStateHandler['M'] = function (handler, params, prefix) {\n  return handler.deleteLines(params);\n};\n\ncsiStateHandler['P'] = function (handler, params, prefix) {\n  return handler.deleteChars(params);\n};\n\ncsiStateHandler['S'] = function (handler, params, prefix) {\n  return handler.scrollUp(params);\n};\n\ncsiStateHandler['T'] = function (handler, params, prefix) {\n  if (params.length < 2 && !prefix) {\n    handler.scrollDown(params);\n  }\n};\n\ncsiStateHandler['X'] = function (handler, params, prefix) {\n  return handler.eraseChars(params);\n};\n\ncsiStateHandler['Z'] = function (handler, params, prefix) {\n  return handler.cursorBackwardTab(params);\n};\n\ncsiStateHandler['`'] = function (handler, params, prefix) {\n  return handler.charPosAbsolute(params);\n};\n\ncsiStateHandler['a'] = function (handler, params, prefix) {\n  return handler.HPositionRelative(params);\n};\n\ncsiStateHandler['b'] = function (handler, params, prefix) {\n  return handler.repeatPrecedingCharacter(params);\n};\n\ncsiStateHandler['c'] = function (handler, params, prefix) {\n  return handler.sendDeviceAttributes(params);\n};\n\ncsiStateHandler['d'] = function (handler, params, prefix) {\n  return handler.linePosAbsolute(params);\n};\n\ncsiStateHandler['e'] = function (handler, params, prefix) {\n  return handler.VPositionRelative(params);\n};\n\ncsiStateHandler['f'] = function (handler, params, prefix) {\n  return handler.HVPosition(params);\n};\n\ncsiStateHandler['g'] = function (handler, params, prefix) {\n  return handler.tabClear(params);\n};\n\ncsiStateHandler['h'] = function (handler, params, prefix) {\n  return handler.setMode(params);\n};\n\ncsiStateHandler['l'] = function (handler, params, prefix) {\n  return handler.resetMode(params);\n};\n\ncsiStateHandler['m'] = function (handler, params, prefix) {\n  return handler.charAttributes(params);\n};\n\ncsiStateHandler['n'] = function (handler, params, prefix) {\n  return handler.deviceStatus(params);\n};\n\ncsiStateHandler['p'] = function (handler, params, prefix) {\n  switch (prefix) {\n    case '!':\n      handler.softReset(params);\n      break;\n  }\n};\n\ncsiStateHandler['q'] = function (handler, params, prefix, postfix) {\n  if (postfix === ' ') {\n    handler.setCursorStyle(params);\n  }\n};\n\ncsiStateHandler['r'] = function (handler, params) {\n  return handler.setScrollRegion(params);\n};\n\ncsiStateHandler['s'] = function (handler, params) {\n  return handler.saveCursor(params);\n};\n\ncsiStateHandler['u'] = function (handler, params) {\n  return handler.restoreCursor(params);\n};\n\ncsiStateHandler[EscapeSequences_1.C0.CAN] = function (handler, params, prefix, postfix, parser) {\n  return parser.setState(ParserState.NORMAL);\n};\n\nvar ParserState;\n\n(function (ParserState) {\n  ParserState[ParserState[\"NORMAL\"] = 0] = \"NORMAL\";\n  ParserState[ParserState[\"ESCAPED\"] = 1] = \"ESCAPED\";\n  ParserState[ParserState[\"CSI_PARAM\"] = 2] = \"CSI_PARAM\";\n  ParserState[ParserState[\"CSI\"] = 3] = \"CSI\";\n  ParserState[ParserState[\"OSC\"] = 4] = \"OSC\";\n  ParserState[ParserState[\"CHARSET\"] = 5] = \"CHARSET\";\n  ParserState[ParserState[\"DCS\"] = 6] = \"DCS\";\n  ParserState[ParserState[\"IGNORE\"] = 7] = \"IGNORE\";\n})(ParserState = exports.ParserState || (exports.ParserState = {}));\n\nvar Parser = function () {\n  function Parser(_inputHandler, _terminal) {\n    this._inputHandler = _inputHandler;\n    this._terminal = _terminal;\n    this._state = ParserState.NORMAL;\n  }\n\n  Parser.prototype.parse = function (data) {\n    var l = data.length;\n    var j;\n    var cs;\n    var ch;\n    var code;\n    var low;\n    var cursorStartX = this._terminal.buffer.x;\n    var cursorStartY = this._terminal.buffer.y;\n\n    if (this._terminal.debug) {\n      this._terminal.log('data: ' + data);\n    }\n\n    this._position = 0;\n\n    if (this._terminal.surrogate_high) {\n      data = this._terminal.surrogate_high + data;\n      this._terminal.surrogate_high = '';\n    }\n\n    for (; this._position < l; this._position++) {\n      ch = data[this._position];\n      code = data.charCodeAt(this._position);\n\n      if (0xD800 <= code && code <= 0xDBFF) {\n        low = data.charCodeAt(this._position + 1);\n\n        if (isNaN(low)) {\n          this._terminal.surrogate_high = ch;\n          continue;\n        }\n\n        code = (code - 0xD800) * 0x400 + (low - 0xDC00) + 0x10000;\n        ch += data.charAt(this._position + 1);\n      }\n\n      if (0xDC00 <= code && code <= 0xDFFF) {\n        continue;\n      }\n\n      switch (this._state) {\n        case ParserState.NORMAL:\n          if (ch in normalStateHandler) {\n            normalStateHandler[ch](this, this._inputHandler);\n          } else {\n            this._inputHandler.addChar(ch, code);\n          }\n\n          break;\n\n        case ParserState.ESCAPED:\n          if (ch in escapedStateHandler) {\n            escapedStateHandler[ch](this, this._terminal);\n            break;\n          }\n\n          switch (ch) {\n            case '(':\n            case ')':\n            case '*':\n            case '+':\n            case '-':\n            case '.':\n              switch (ch) {\n                case '(':\n                  this._terminal.gcharset = 0;\n                  break;\n\n                case ')':\n                  this._terminal.gcharset = 1;\n                  break;\n\n                case '*':\n                  this._terminal.gcharset = 2;\n                  break;\n\n                case '+':\n                  this._terminal.gcharset = 3;\n                  break;\n\n                case '-':\n                  this._terminal.gcharset = 1;\n                  break;\n\n                case '.':\n                  this._terminal.gcharset = 2;\n                  break;\n              }\n\n              this._state = ParserState.CHARSET;\n              break;\n\n            case '/':\n              this._terminal.gcharset = 3;\n              this._state = ParserState.CHARSET;\n              this._position--;\n              break;\n\n            case 'N':\n              this._state = ParserState.NORMAL;\n              break;\n\n            case 'O':\n              this._state = ParserState.NORMAL;\n              break;\n\n            case 'n':\n              this._terminal.setgLevel(2);\n\n              this._state = ParserState.NORMAL;\n              break;\n\n            case 'o':\n              this._terminal.setgLevel(3);\n\n              this._state = ParserState.NORMAL;\n              break;\n\n            case '|':\n              this._terminal.setgLevel(3);\n\n              this._state = ParserState.NORMAL;\n              break;\n\n            case '}':\n              this._terminal.setgLevel(2);\n\n              this._state = ParserState.NORMAL;\n              break;\n\n            case '~':\n              this._terminal.setgLevel(1);\n\n              this._state = ParserState.NORMAL;\n              break;\n\n            case '7':\n              this._inputHandler.saveCursor();\n\n              this._state = ParserState.NORMAL;\n              break;\n\n            case '8':\n              this._inputHandler.restoreCursor();\n\n              this._state = ParserState.NORMAL;\n              break;\n\n            case '#':\n              this._state = ParserState.NORMAL;\n              this._position++;\n              break;\n\n            case 'H':\n              this._terminal.tabSet();\n\n              this._state = ParserState.NORMAL;\n              break;\n\n            case '=':\n              this._terminal.log('Serial port requested application keypad.');\n\n              this._terminal.applicationKeypad = true;\n\n              if (this._terminal.viewport) {\n                this._terminal.viewport.syncScrollArea();\n              }\n\n              this._state = ParserState.NORMAL;\n              break;\n\n            case '>':\n              this._terminal.log('Switching back to normal keypad.');\n\n              this._terminal.applicationKeypad = false;\n\n              if (this._terminal.viewport) {\n                this._terminal.viewport.syncScrollArea();\n              }\n\n              this._state = ParserState.NORMAL;\n              break;\n\n            default:\n              this._state = ParserState.NORMAL;\n\n              this._terminal.error('Unknown ESC control: %s.', ch);\n\n              break;\n          }\n\n          break;\n\n        case ParserState.CHARSET:\n          if (ch in Charsets_1.CHARSETS) {\n            cs = Charsets_1.CHARSETS[ch];\n\n            if (ch === '/') {\n              this.skipNextChar();\n            }\n          } else {\n            cs = Charsets_1.DEFAULT_CHARSET;\n          }\n\n          this._terminal.setgCharset(this._terminal.gcharset, cs);\n\n          this._terminal.gcharset = null;\n          this._state = ParserState.NORMAL;\n          break;\n\n        case ParserState.OSC:\n          if (ch === EscapeSequences_1.C0.ESC || ch === EscapeSequences_1.C0.BEL) {\n            if (ch === EscapeSequences_1.C0.ESC) this._position++;\n\n            this._terminal.params.push(this._terminal.currentParam);\n\n            switch (this._terminal.params[0]) {\n              case 0:\n              case 1:\n              case 2:\n                if (this._terminal.params[1]) {\n                  this._terminal.title = this._terminal.params[1];\n\n                  this._terminal.handleTitle(this._terminal.title);\n                }\n\n                break;\n\n              case 3:\n                break;\n\n              case 4:\n              case 5:\n                break;\n\n              case 10:\n              case 11:\n              case 12:\n              case 13:\n              case 14:\n              case 15:\n              case 16:\n              case 17:\n              case 18:\n              case 19:\n                break;\n\n              case 46:\n                break;\n\n              case 50:\n                break;\n\n              case 51:\n                break;\n\n              case 52:\n                break;\n\n              case 104:\n              case 105:\n              case 110:\n              case 111:\n              case 112:\n              case 113:\n              case 114:\n              case 115:\n              case 116:\n              case 117:\n              case 118:\n                break;\n            }\n\n            this._terminal.params = [];\n            this._terminal.currentParam = 0;\n            this._state = ParserState.NORMAL;\n          } else {\n            if (!this._terminal.params.length) {\n              if (ch >= '0' && ch <= '9') {\n                this._terminal.currentParam = this._terminal.currentParam * 10 + ch.charCodeAt(0) - 48;\n              } else if (ch === ';') {\n                this._terminal.params.push(this._terminal.currentParam);\n\n                this._terminal.currentParam = '';\n              }\n            } else {\n              this._terminal.currentParam += ch;\n            }\n          }\n\n          break;\n\n        case ParserState.CSI_PARAM:\n          if (ch in csiParamStateHandler) {\n            csiParamStateHandler[ch](this);\n            break;\n          }\n\n          this.finalizeParam();\n          this._state = ParserState.CSI;\n\n        case ParserState.CSI:\n          if (ch in csiStateHandler) {\n            if (this._terminal.debug) {\n              this._terminal.log(\"CSI \" + (this._terminal.prefix ? this._terminal.prefix : '') + \" \" + (this._terminal.params ? this._terminal.params.join(';') : '') + \" \" + (this._terminal.postfix ? this._terminal.postfix : '') + \" \" + ch);\n            }\n\n            csiStateHandler[ch](this._inputHandler, this._terminal.params, this._terminal.prefix, this._terminal.postfix, this);\n          } else {\n            this._terminal.error('Unknown CSI code: %s.', ch);\n          }\n\n          this._state = ParserState.NORMAL;\n          this._terminal.prefix = '';\n          this._terminal.postfix = '';\n          break;\n\n        case ParserState.DCS:\n          if (ch === EscapeSequences_1.C0.ESC || ch === EscapeSequences_1.C0.BEL) {\n            if (ch === EscapeSequences_1.C0.ESC) this._position++;\n            var pt = void 0;\n            var valid = void 0;\n\n            switch (this._terminal.prefix) {\n              case '':\n                break;\n\n              case '$q':\n                pt = this._terminal.currentParam;\n                valid = false;\n\n                switch (pt) {\n                  case '\"q':\n                    pt = '0\"q';\n                    break;\n\n                  case '\"p':\n                    pt = '61\"p';\n                    break;\n\n                  case 'r':\n                    pt = '' + (this._terminal.buffer.scrollTop + 1) + ';' + (this._terminal.buffer.scrollBottom + 1) + 'r';\n                    break;\n\n                  case 'm':\n                    pt = '0m';\n                    break;\n\n                  default:\n                    this._terminal.error('Unknown DCS Pt: %s.', pt);\n\n                    pt = '';\n                    break;\n                }\n\n                this._terminal.send(EscapeSequences_1.C0.ESC + 'P' + +valid + '$r' + pt + EscapeSequences_1.C0.ESC + '\\\\');\n\n                break;\n\n              case '+p':\n                break;\n\n              case '+q':\n                pt = this._terminal.currentParam;\n                valid = false;\n\n                this._terminal.send(EscapeSequences_1.C0.ESC + 'P' + +valid + '+r' + pt + EscapeSequences_1.C0.ESC + '\\\\');\n\n                break;\n\n              default:\n                this._terminal.error('Unknown DCS prefix: %s.', this._terminal.prefix);\n\n                break;\n            }\n\n            this._terminal.currentParam = 0;\n            this._terminal.prefix = '';\n            this._state = ParserState.NORMAL;\n          } else if (!this._terminal.currentParam) {\n            if (!this._terminal.prefix && ch !== '$' && ch !== '+') {\n              this._terminal.currentParam = ch;\n            } else if (this._terminal.prefix.length === 2) {\n              this._terminal.currentParam = ch;\n            } else {\n              this._terminal.prefix += ch;\n            }\n          } else {\n            this._terminal.currentParam += ch;\n          }\n\n          break;\n\n        case ParserState.IGNORE:\n          if (ch === EscapeSequences_1.C0.ESC || ch === EscapeSequences_1.C0.BEL) {\n            if (ch === EscapeSequences_1.C0.ESC) this._position++;\n            this._state = ParserState.NORMAL;\n          }\n\n          break;\n      }\n    }\n\n    if (this._terminal.buffer.x !== cursorStartX || this._terminal.buffer.y !== cursorStartY) {\n      this._terminal.emit('cursormove');\n    }\n\n    return this._state;\n  };\n\n  Parser.prototype.setState = function (state) {\n    this._state = state;\n  };\n\n  Parser.prototype.setPrefix = function (prefix) {\n    this._terminal.prefix = prefix;\n  };\n\n  Parser.prototype.setPostfix = function (postfix) {\n    this._terminal.postfix = postfix;\n  };\n\n  Parser.prototype.setParam = function (param) {\n    this._terminal.currentParam = param;\n  };\n\n  Parser.prototype.getParam = function () {\n    return this._terminal.currentParam;\n  };\n\n  Parser.prototype.finalizeParam = function () {\n    this._terminal.params.push(this._terminal.currentParam);\n\n    this._terminal.currentParam = 0;\n  };\n\n  Parser.prototype.skipNextChar = function () {\n    this._position++;\n  };\n\n  return Parser;\n}();\n\nexports.Parser = Parser;","map":null,"metadata":{},"sourceType":"script"}