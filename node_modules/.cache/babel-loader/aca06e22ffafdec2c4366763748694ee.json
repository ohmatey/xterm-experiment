{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Buffer_1 = require(\"../Buffer\");\n\nvar BaseRenderLayer_1 = require(\"./BaseRenderLayer\");\n\nvar BLINK_INTERVAL = 600;\n\nvar CursorRenderLayer = function (_super) {\n  __extends(CursorRenderLayer, _super);\n\n  function CursorRenderLayer(container, zIndex, colors) {\n    var _this = _super.call(this, container, 'cursor', zIndex, true, colors) || this;\n\n    _this._state = {\n      x: null,\n      y: null,\n      isFocused: null,\n      style: null,\n      width: null\n    };\n    _this._cursorRenderers = {\n      'bar': _this._renderBarCursor.bind(_this),\n      'block': _this._renderBlockCursor.bind(_this),\n      'underline': _this._renderUnderlineCursor.bind(_this)\n    };\n    return _this;\n  }\n\n  CursorRenderLayer.prototype.resize = function (terminal, dim, charSizeChanged) {\n    _super.prototype.resize.call(this, terminal, dim, charSizeChanged);\n\n    this._state = {\n      x: null,\n      y: null,\n      isFocused: null,\n      style: null,\n      width: null\n    };\n  };\n\n  CursorRenderLayer.prototype.reset = function (terminal) {\n    this._clearCursor();\n\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.dispose();\n\n      this._cursorBlinkStateManager = null;\n      this.onOptionsChanged(terminal);\n    }\n  };\n\n  CursorRenderLayer.prototype.onBlur = function (terminal) {\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.pause();\n    }\n\n    terminal.refresh(terminal.buffer.y, terminal.buffer.y);\n  };\n\n  CursorRenderLayer.prototype.onFocus = function (terminal) {\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.resume(terminal);\n    } else {\n      terminal.refresh(terminal.buffer.y, terminal.buffer.y);\n    }\n  };\n\n  CursorRenderLayer.prototype.onOptionsChanged = function (terminal) {\n    var _this = this;\n\n    if (terminal.options.cursorBlink) {\n      if (!this._cursorBlinkStateManager) {\n        this._cursorBlinkStateManager = new CursorBlinkStateManager(terminal, function () {\n          _this._render(terminal, true);\n        });\n      }\n    } else {\n      if (this._cursorBlinkStateManager) {\n        this._cursorBlinkStateManager.dispose();\n\n        this._cursorBlinkStateManager = null;\n      }\n\n      terminal.refresh(terminal.buffer.y, terminal.buffer.y);\n    }\n  };\n\n  CursorRenderLayer.prototype.onCursorMove = function (terminal) {\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.restartBlinkAnimation(terminal);\n    }\n  };\n\n  CursorRenderLayer.prototype.onGridChanged = function (terminal, startRow, endRow) {\n    if (!this._cursorBlinkStateManager || this._cursorBlinkStateManager.isPaused) {\n      this._render(terminal, false);\n    } else {\n      this._cursorBlinkStateManager.restartBlinkAnimation(terminal);\n    }\n  };\n\n  CursorRenderLayer.prototype._render = function (terminal, triggeredByAnimationFrame) {\n    if (!terminal.cursorState || terminal.cursorHidden) {\n      this._clearCursor();\n\n      return;\n    }\n\n    var cursorY = terminal.buffer.ybase + terminal.buffer.y;\n    var viewportRelativeCursorY = cursorY - terminal.buffer.ydisp;\n\n    if (viewportRelativeCursorY < 0 || viewportRelativeCursorY >= terminal.rows) {\n      this._clearCursor();\n\n      return;\n    }\n\n    var charData = terminal.buffer.lines.get(cursorY)[terminal.buffer.x];\n\n    if (!charData) {\n      return;\n    }\n\n    if (!terminal.isFocused) {\n      this._clearCursor();\n\n      this._ctx.save();\n\n      this._ctx.fillStyle = this._colors.cursor;\n\n      this._renderBlurCursor(terminal, terminal.buffer.x, viewportRelativeCursorY, charData);\n\n      this._ctx.restore();\n\n      this._state.x = terminal.buffer.x;\n      this._state.y = viewportRelativeCursorY;\n      this._state.isFocused = false;\n      this._state.style = terminal.options.cursorStyle;\n      this._state.width = charData[Buffer_1.CHAR_DATA_WIDTH_INDEX];\n      return;\n    }\n\n    if (this._cursorBlinkStateManager && !this._cursorBlinkStateManager.isCursorVisible) {\n      this._clearCursor();\n\n      return;\n    }\n\n    if (this._state) {\n      if (this._state.x === terminal.buffer.x && this._state.y === viewportRelativeCursorY && this._state.isFocused === terminal.isFocused && this._state.style === terminal.options.cursorStyle && this._state.width === charData[Buffer_1.CHAR_DATA_WIDTH_INDEX]) {\n        return;\n      }\n\n      this._clearCursor();\n    }\n\n    this._ctx.save();\n\n    this._cursorRenderers[terminal.options.cursorStyle || 'block'](terminal, terminal.buffer.x, viewportRelativeCursorY, charData);\n\n    this._ctx.restore();\n\n    this._state.x = terminal.buffer.x;\n    this._state.y = viewportRelativeCursorY;\n    this._state.isFocused = false;\n    this._state.style = terminal.options.cursorStyle;\n    this._state.width = charData[Buffer_1.CHAR_DATA_WIDTH_INDEX];\n  };\n\n  CursorRenderLayer.prototype._clearCursor = function () {\n    if (this._state) {\n      this.clearCells(this._state.x, this._state.y, this._state.width, 1);\n      this._state = {\n        x: null,\n        y: null,\n        isFocused: null,\n        style: null,\n        width: null\n      };\n    }\n  };\n\n  CursorRenderLayer.prototype._renderBarCursor = function (terminal, x, y, charData) {\n    this._ctx.save();\n\n    this._ctx.fillStyle = this._colors.cursor;\n    this.fillLeftLineAtCell(x, y);\n\n    this._ctx.restore();\n  };\n\n  CursorRenderLayer.prototype._renderBlockCursor = function (terminal, x, y, charData) {\n    this._ctx.save();\n\n    this._ctx.fillStyle = this._colors.cursor;\n    this.fillCells(x, y, charData[Buffer_1.CHAR_DATA_WIDTH_INDEX], 1);\n    this._ctx.fillStyle = this._colors.cursorAccent;\n    this.fillCharTrueColor(terminal, charData, x, y);\n\n    this._ctx.restore();\n  };\n\n  CursorRenderLayer.prototype._renderUnderlineCursor = function (terminal, x, y, charData) {\n    this._ctx.save();\n\n    this._ctx.fillStyle = this._colors.cursor;\n    this.fillBottomLineAtCells(x, y);\n\n    this._ctx.restore();\n  };\n\n  CursorRenderLayer.prototype._renderBlurCursor = function (terminal, x, y, charData) {\n    this._ctx.save();\n\n    this._ctx.strokeStyle = this._colors.cursor;\n    this.strokeRectAtCell(x, y, charData[Buffer_1.CHAR_DATA_WIDTH_INDEX], 1);\n\n    this._ctx.restore();\n  };\n\n  return CursorRenderLayer;\n}(BaseRenderLayer_1.BaseRenderLayer);\n\nexports.CursorRenderLayer = CursorRenderLayer;\n\nvar CursorBlinkStateManager = function () {\n  function CursorBlinkStateManager(terminal, renderCallback) {\n    this.renderCallback = renderCallback;\n    this.isCursorVisible = true;\n\n    if (terminal.isFocused) {\n      this._restartInterval();\n    }\n  }\n\n  Object.defineProperty(CursorBlinkStateManager.prototype, \"isPaused\", {\n    get: function () {\n      return !(this._blinkStartTimeout || this._blinkInterval);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  CursorBlinkStateManager.prototype.dispose = function () {\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n      this._blinkInterval = null;\n    }\n\n    if (this._blinkStartTimeout) {\n      window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = null;\n    }\n\n    if (this._animationFrame) {\n      window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = null;\n    }\n  };\n\n  CursorBlinkStateManager.prototype.restartBlinkAnimation = function (terminal) {\n    var _this = this;\n\n    if (this.isPaused) {\n      return;\n    }\n\n    this._animationTimeRestarted = Date.now();\n    this.isCursorVisible = true;\n\n    if (!this._animationFrame) {\n      this._animationFrame = window.requestAnimationFrame(function () {\n        _this.renderCallback();\n\n        _this._animationFrame = null;\n      });\n    }\n  };\n\n  CursorBlinkStateManager.prototype._restartInterval = function (timeToStart) {\n    var _this = this;\n\n    if (timeToStart === void 0) {\n      timeToStart = BLINK_INTERVAL;\n    }\n\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n    }\n\n    this._blinkStartTimeout = setTimeout(function () {\n      if (_this._animationTimeRestarted) {\n        var time = BLINK_INTERVAL - (Date.now() - _this._animationTimeRestarted);\n\n        _this._animationTimeRestarted = null;\n\n        if (time > 0) {\n          _this._restartInterval(time);\n\n          return;\n        }\n      }\n\n      _this.isCursorVisible = false;\n      _this._animationFrame = window.requestAnimationFrame(function () {\n        _this.renderCallback();\n\n        _this._animationFrame = null;\n      });\n      _this._blinkInterval = setInterval(function () {\n        if (_this._animationTimeRestarted) {\n          var time = BLINK_INTERVAL - (Date.now() - _this._animationTimeRestarted);\n\n          _this._animationTimeRestarted = null;\n\n          _this._restartInterval(time);\n\n          return;\n        }\n\n        _this.isCursorVisible = !_this.isCursorVisible;\n        _this._animationFrame = window.requestAnimationFrame(function () {\n          _this.renderCallback();\n\n          _this._animationFrame = null;\n        });\n      }, BLINK_INTERVAL);\n    }, timeToStart);\n  };\n\n  CursorBlinkStateManager.prototype.pause = function () {\n    this.isCursorVisible = true;\n\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n      this._blinkInterval = null;\n    }\n\n    if (this._blinkStartTimeout) {\n      window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = null;\n    }\n\n    if (this._animationFrame) {\n      window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = null;\n    }\n  };\n\n  CursorBlinkStateManager.prototype.resume = function (terminal) {\n    this._animationTimeRestarted = null;\n\n    this._restartInterval();\n\n    this.restartBlinkAnimation(terminal);\n  };\n\n  return CursorBlinkStateManager;\n}();","map":null,"metadata":{},"sourceType":"script"}