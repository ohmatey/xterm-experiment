{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/projects/ols/xterm-test/src/components/XtermTerminal.js\";\nimport React, { Component } from 'react';\nimport { XTerm, Terminal } from 'react-xterm';\nimport { ResizableBox } from 'react-resizable';\n\nclass XtermTerminal extends Component {\n  componentDidMount() {\n    runFakeTerminal(this.refs.xterm);\n    this.fitTerminal();\n  }\n\n  componentWillUnmount() {\n    this.refs.mainDeviceComponent.componentWillUnmount();\n  }\n\n  sendToTerminal(text) {\n    this.refs.xterm && this.refs.xterm.writeln('Welcome to xterm!!@@##.js');\n  }\n\n  fitTerminal() {\n    this.refs.xterm && this.refs.xterm.fit();\n  }\n\n  throttleConsoleResize(size) {\n    this.fitTerminal();\n  }\n\n  render() {\n    return React.createElement(ResizableBox, {\n      width: 200,\n      height: 200,\n      onResize: this.throttleConsoleResize,\n      style: {\n        overflow: 'hidden'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(XTerm, {\n      ref: \"xterm\",\n      style: {\n        addons: ['fit', 'fullscreen', 'search'],\n        overflow: 'hidden',\n        position: 'relative',\n        width: '100%',\n        height: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default XtermTerminal;\n\nfunction runFakeTerminal(xterm) {\n  const term = xterm.getTerminal();\n  var shellprompt = '$ ';\n\n  function prompt() {\n    xterm.write('\\r\\n' + shellprompt);\n  }\n\n  xterm.writeln('Welcome to xterm.js');\n  xterm.writeln('This is a local terminal emulation, without a real terminal in the back-end.');\n  xterm.writeln('Type some keys and commands to play around.');\n  xterm.writeln('');\n  prompt();\n  term.on('key', function (key, ev) {\n    var printable = !ev.altKey && !ev.ctrlKey && !ev.metaKey;\n\n    if (ev.keyCode === 13) {\n      prompt(); // } else if (ev.keyCode == 8) {\n      //   // Do not delete the prompt\n      //   if (term['x'] > 2) {\n      //     xterm.write('\\b \\b')\n      //   }\n    } else if (printable) {\n      xterm.write(key);\n    }\n  });\n  term.on('paste', function (data, ev) {\n    xterm.write(data);\n  });\n}","map":{"version":3,"sources":["/Users/admin/Documents/projects/ols/xterm-test/src/components/XtermTerminal.js"],"names":["React","Component","XTerm","Terminal","ResizableBox","XtermTerminal","componentDidMount","runFakeTerminal","refs","xterm","fitTerminal","componentWillUnmount","mainDeviceComponent","sendToTerminal","text","writeln","fit","throttleConsoleResize","size","render","overflow","addons","position","width","height","term","getTerminal","shellprompt","prompt","write","on","key","ev","printable","altKey","ctrlKey","metaKey","keyCode","data"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,aAAhC;AACA,SAASC,YAAT,QAA6B,iBAA7B;;AAEA,MAAMC,aAAN,SAA4BJ,SAA5B,CAAsC;AACpCK,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,eAAe,CAAC,KAAKC,IAAL,CAAUC,KAAX,CAAf;AAEA,SAAKC,WAAL;AACD;;AACDC,EAAAA,oBAAoB,GAAG;AACrB,SAAKH,IAAL,CAAUI,mBAAV,CAA8BD,oBAA9B;AACD;;AAEDE,EAAAA,cAAc,CAACC,IAAD,EAAO;AACnB,SAAKN,IAAL,CAAUC,KAAV,IAAmB,KAAKD,IAAL,CAAUC,KAAV,CAAgBM,OAAhB,CAAwB,2BAAxB,CAAnB;AACD;;AAEDL,EAAAA,WAAW,GAAG;AACZ,SAAKF,IAAL,CAAUC,KAAV,IAAmB,KAAKD,IAAL,CAAUC,KAAV,CAAgBO,GAAhB,EAAnB;AACD;;AAEDC,EAAAA,qBAAqB,CAACC,IAAD,EAAO;AAC1B,SAAKR,WAAL;AACD;;AAEDS,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAE,GAArB;AAA0B,MAAA,MAAM,EAAE,GAAlC;AAAuC,MAAA,QAAQ,EAAE,KAAKF,qBAAtD;AAA6E,MAAA,KAAK,EAAE;AAClFG,QAAAA,QAAQ,EAAE;AADwE,OAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGE,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAC,OAAX;AAAmB,MAAA,KAAK,EAAE;AACxBC,QAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,YAAR,EAAsB,QAAtB,CADgB;AAExBD,QAAAA,QAAQ,EAAE,QAFc;AAGxBE,QAAAA,QAAQ,EAAE,UAHc;AAIxBC,QAAAA,KAAK,EAAE,MAJiB;AAKxBC,QAAAA,MAAM,EAAE;AALgB,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADF;AAaD;;AApCmC;;AAuCtC,eAAenB,aAAf;;AAEA,SAASE,eAAT,CAAyBE,KAAzB,EAAuC;AACrC,QAAMgB,IAAc,GAAGhB,KAAK,CAACiB,WAAN,EAAvB;AACA,MAAIC,WAAW,GAAG,IAAlB;;AAEA,WAASC,MAAT,GAAmB;AACjBnB,IAAAA,KAAK,CAACoB,KAAN,CAAY,SAASF,WAArB;AACD;;AACDlB,EAAAA,KAAK,CAACM,OAAN,CAAc,qBAAd;AACAN,EAAAA,KAAK,CAACM,OAAN,CAAc,8EAAd;AACAN,EAAAA,KAAK,CAACM,OAAN,CAAc,6CAAd;AACAN,EAAAA,KAAK,CAACM,OAAN,CAAc,EAAd;AACAa,EAAAA,MAAM;AAENH,EAAAA,IAAI,CAACK,EAAL,CAAQ,KAAR,EAAe,UAAUC,GAAV,EAAeC,EAAf,EAAmB;AAChC,QAAIC,SAAS,GACX,CAACD,EAAE,CAACE,MAAJ,IAAc,CAACF,EAAE,CAACG,OAAlB,IAA6B,CAACH,EAAE,CAACI,OADnC;;AAIA,QAAIJ,EAAE,CAACK,OAAH,KAAe,EAAnB,EAAuB;AACrBT,MAAAA,MAAM,GADe,CAEvB;AACA;AACA;AACA;AACA;AACC,KAPD,MAOO,IAAIK,SAAJ,EAAe;AACpBxB,MAAAA,KAAK,CAACoB,KAAN,CAAYE,GAAZ;AACD;AACF,GAfD;AAiBAN,EAAAA,IAAI,CAACK,EAAL,CAAQ,OAAR,EAAiB,UAAUQ,IAAV,EAAgBN,EAAhB,EAAoB;AACnCvB,IAAAA,KAAK,CAACoB,KAAN,CAAYS,IAAZ;AACD,GAFD;AAGD","sourcesContent":["import React, { Component } from 'react'\nimport { XTerm, Terminal } from 'react-xterm'\nimport { ResizableBox } from 'react-resizable'\n\nclass XtermTerminal extends Component {\n  componentDidMount() {\n    runFakeTerminal(this.refs.xterm)\n\n    this.fitTerminal()\n  }\n  componentWillUnmount() {\n    this.refs.mainDeviceComponent.componentWillUnmount()\n  }\n\n  sendToTerminal(text) {\n    this.refs.xterm && this.refs.xterm.writeln('Welcome to xterm!!@@##.js')\n  }\n\n  fitTerminal() {\n    this.refs.xterm && this.refs.xterm.fit()\n  }\n\n  throttleConsoleResize(size) {\n    this.fitTerminal()\n  }\n\n  render() {\n    return (\n      <ResizableBox width={200} height={200} onResize={this.throttleConsoleResize} style={{\n        overflow: 'hidden'\n      }} >\n        <XTerm ref='xterm' style={{\n          addons: ['fit', 'fullscreen', 'search'],\n          overflow: 'hidden',\n          position: 'relative',\n          width: '100%',\n          height: '100%'\n        }} />\n      </ResizableBox>\n    )\n  }\n}\n\nexport default XtermTerminal\n\nfunction runFakeTerminal(xterm: XTerm) {\n  const term: Terminal = xterm.getTerminal()\n  var shellprompt = '$ '\n\n  function prompt () {\n    xterm.write('\\r\\n' + shellprompt)\n  }\n  xterm.writeln('Welcome to xterm.js')\n  xterm.writeln('This is a local terminal emulation, without a real terminal in the back-end.')\n  xterm.writeln('Type some keys and commands to play around.')\n  xterm.writeln('')\n  prompt()\n\n  term.on('key', function (key, ev) {\n    var printable = (\n      !ev.altKey && !ev.ctrlKey && !ev.metaKey\n    )\n\n    if (ev.keyCode === 13) {\n      prompt()\n    // } else if (ev.keyCode == 8) {\n    //   // Do not delete the prompt\n    //   if (term['x'] > 2) {\n    //     xterm.write('\\b \\b')\n    //   }\n    } else if (printable) {\n      xterm.write(key)\n    }\n  })\n\n  term.on('paste', function (data, ev) {\n    xterm.write(data)\n  })\n}\n"]},"metadata":{},"sourceType":"module"}