{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar EventEmitter_1 = require(\"../EventEmitter\");\n\nvar CircularList = function (_super) {\n  __extends(CircularList, _super);\n\n  function CircularList(_maxLength) {\n    var _this = _super.call(this) || this;\n\n    _this._maxLength = _maxLength;\n    _this._array = new Array(_this._maxLength);\n    _this._startIndex = 0;\n    _this._length = 0;\n    return _this;\n  }\n\n  Object.defineProperty(CircularList.prototype, \"maxLength\", {\n    get: function () {\n      return this._maxLength;\n    },\n    set: function (newMaxLength) {\n      if (this._maxLength === newMaxLength) {\n        return;\n      }\n\n      var newArray = new Array(newMaxLength);\n\n      for (var i = 0; i < Math.min(newMaxLength, this.length); i++) {\n        newArray[i] = this._array[this._getCyclicIndex(i)];\n      }\n\n      this._array = newArray;\n      this._maxLength = newMaxLength;\n      this._startIndex = 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CircularList.prototype, \"length\", {\n    get: function () {\n      return this._length;\n    },\n    set: function (newLength) {\n      if (newLength > this._length) {\n        for (var i = this._length; i < newLength; i++) {\n          this._array[i] = undefined;\n        }\n      }\n\n      this._length = newLength;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CircularList.prototype, \"forEach\", {\n    get: function () {\n      var _this = this;\n\n      return function (callbackfn) {\n        var i = 0;\n        var length = _this.length;\n\n        for (var i_1 = 0; i_1 < length; i_1++) {\n          callbackfn(_this.get(i_1), i_1);\n        }\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  CircularList.prototype.get = function (index) {\n    return this._array[this._getCyclicIndex(index)];\n  };\n\n  CircularList.prototype.set = function (index, value) {\n    this._array[this._getCyclicIndex(index)] = value;\n  };\n\n  CircularList.prototype.push = function (value) {\n    this._array[this._getCyclicIndex(this._length)] = value;\n\n    if (this._length === this._maxLength) {\n      this._startIndex++;\n\n      if (this._startIndex === this._maxLength) {\n        this._startIndex = 0;\n      }\n\n      this.emit('trim', 1);\n    } else {\n      this._length++;\n    }\n  };\n\n  CircularList.prototype.pop = function () {\n    return this._array[this._getCyclicIndex(this._length-- - 1)];\n  };\n\n  CircularList.prototype.splice = function (start, deleteCount) {\n    var items = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      items[_i - 2] = arguments[_i];\n    }\n\n    if (deleteCount) {\n      for (var i = start; i < this._length - deleteCount; i++) {\n        this._array[this._getCyclicIndex(i)] = this._array[this._getCyclicIndex(i + deleteCount)];\n      }\n\n      this._length -= deleteCount;\n    }\n\n    if (items && items.length) {\n      for (var i = this._length - 1; i >= start; i--) {\n        this._array[this._getCyclicIndex(i + items.length)] = this._array[this._getCyclicIndex(i)];\n      }\n\n      for (var i = 0; i < items.length; i++) {\n        this._array[this._getCyclicIndex(start + i)] = items[i];\n      }\n\n      if (this._length + items.length > this.maxLength) {\n        var countToTrim = this._length + items.length - this.maxLength;\n        this._startIndex += countToTrim;\n        this._length = this.maxLength;\n        this.emit('trim', countToTrim);\n      } else {\n        this._length += items.length;\n      }\n    }\n  };\n\n  CircularList.prototype.trimStart = function (count) {\n    if (count > this._length) {\n      count = this._length;\n    }\n\n    this._startIndex += count;\n    this._length -= count;\n    this.emit('trim', count);\n  };\n\n  CircularList.prototype.shiftElements = function (start, count, offset) {\n    if (count <= 0) {\n      return;\n    }\n\n    if (start < 0 || start >= this._length) {\n      throw new Error('start argument out of range');\n    }\n\n    if (start + offset < 0) {\n      throw new Error('Cannot shift elements in list beyond index 0');\n    }\n\n    if (offset > 0) {\n      for (var i = count - 1; i >= 0; i--) {\n        this.set(start + i + offset, this.get(start + i));\n      }\n\n      var expandListBy = start + count + offset - this._length;\n\n      if (expandListBy > 0) {\n        this._length += expandListBy;\n\n        while (this._length > this.maxLength) {\n          this._length--;\n          this._startIndex++;\n          this.emit('trim', 1);\n        }\n      }\n    } else {\n      for (var i = 0; i < count; i++) {\n        this.set(start + i + offset, this.get(start + i));\n      }\n    }\n  };\n\n  CircularList.prototype._getCyclicIndex = function (index) {\n    return (this._startIndex + index) % this.maxLength;\n  };\n\n  return CircularList;\n}(EventEmitter_1.EventEmitter);\n\nexports.CircularList = CircularList;","map":null,"metadata":{},"sourceType":"script"}