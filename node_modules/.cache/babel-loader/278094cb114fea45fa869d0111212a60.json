{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar CircularList_1 = require(\"./utils/CircularList\");\n\nexports.CHAR_DATA_ATTR_INDEX = 0;\nexports.CHAR_DATA_CHAR_INDEX = 1;\nexports.CHAR_DATA_WIDTH_INDEX = 2;\nexports.CHAR_DATA_CODE_INDEX = 3;\nexports.MAX_BUFFER_SIZE = 4294967295;\n\nvar Buffer = function () {\n  function Buffer(_terminal, _hasScrollback) {\n    this._terminal = _terminal;\n    this._hasScrollback = _hasScrollback;\n    this.clear();\n  }\n\n  Object.defineProperty(Buffer.prototype, \"lines\", {\n    get: function () {\n      return this._lines;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Buffer.prototype, \"hasScrollback\", {\n    get: function () {\n      return this._hasScrollback && this.lines.maxLength > this._terminal.rows;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Buffer.prototype, \"isCursorInViewport\", {\n    get: function () {\n      var absoluteY = this.ybase + this.y;\n      var relativeY = absoluteY - this.ydisp;\n      return relativeY >= 0 && relativeY < this._terminal.rows;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Buffer.prototype._getCorrectBufferLength = function (rows) {\n    if (!this._hasScrollback) {\n      return rows;\n    }\n\n    var correctBufferLength = rows + this._terminal.options.scrollback;\n    return correctBufferLength > exports.MAX_BUFFER_SIZE ? exports.MAX_BUFFER_SIZE : correctBufferLength;\n  };\n\n  Buffer.prototype.fillViewportRows = function () {\n    if (this._lines.length === 0) {\n      var i = this._terminal.rows;\n\n      while (i--) {\n        this.lines.push(this._terminal.blankLine());\n      }\n    }\n  };\n\n  Buffer.prototype.clear = function () {\n    this.ydisp = 0;\n    this.ybase = 0;\n    this.y = 0;\n    this.x = 0;\n    this._lines = new CircularList_1.CircularList(this._getCorrectBufferLength(this._terminal.rows));\n    this.scrollTop = 0;\n    this.scrollBottom = this._terminal.rows - 1;\n    this.setupTabStops();\n  };\n\n  Buffer.prototype.resize = function (newCols, newRows) {\n    var newMaxLength = this._getCorrectBufferLength(newRows);\n\n    if (newMaxLength > this._lines.maxLength) {\n      this._lines.maxLength = newMaxLength;\n    }\n\n    if (this._lines.length > 0) {\n      if (this._terminal.cols < newCols) {\n        var ch = [this._terminal.defAttr, ' ', 1, 32];\n\n        for (var i = 0; i < this._lines.length; i++) {\n          while (this._lines.get(i).length < newCols) {\n            this._lines.get(i).push(ch);\n          }\n        }\n      }\n\n      var addToY = 0;\n\n      if (this._terminal.rows < newRows) {\n        for (var y = this._terminal.rows; y < newRows; y++) {\n          if (this._lines.length < newRows + this.ybase) {\n            if (this.ybase > 0 && this._lines.length <= this.ybase + this.y + addToY + 1) {\n              this.ybase--;\n              addToY++;\n\n              if (this.ydisp > 0) {\n                this.ydisp--;\n              }\n            } else {\n              this._lines.push(this._terminal.blankLine(undefined, undefined, newCols));\n            }\n          }\n        }\n      } else {\n        for (var y = this._terminal.rows; y > newRows; y--) {\n          if (this._lines.length > newRows + this.ybase) {\n            if (this._lines.length > this.ybase + this.y + 1) {\n              this._lines.pop();\n            } else {\n              this.ybase++;\n              this.ydisp++;\n            }\n          }\n        }\n      }\n\n      if (newMaxLength < this._lines.maxLength) {\n        var amountToTrim = this._lines.length - newMaxLength;\n\n        if (amountToTrim > 0) {\n          this._lines.trimStart(amountToTrim);\n\n          this.ybase = Math.max(this.ybase - amountToTrim, 0);\n          this.ydisp = Math.max(this.ydisp - amountToTrim, 0);\n        }\n\n        this._lines.maxLength = newMaxLength;\n      }\n\n      this.x = Math.min(this.x, newCols - 1);\n      this.y = Math.min(this.y, newRows - 1);\n\n      if (addToY) {\n        this.y += addToY;\n      }\n\n      this.savedY = Math.min(this.savedY, newRows - 1);\n      this.savedX = Math.min(this.savedX, newCols - 1);\n      this.scrollTop = 0;\n    }\n\n    this.scrollBottom = newRows - 1;\n  };\n\n  Buffer.prototype.translateBufferLineToString = function (lineIndex, trimRight, startCol, endCol) {\n    if (startCol === void 0) {\n      startCol = 0;\n    }\n\n    if (endCol === void 0) {\n      endCol = null;\n    }\n\n    var lineString = '';\n    var line = this.lines.get(lineIndex);\n\n    if (!line) {\n      return '';\n    }\n\n    var startIndex = startCol;\n\n    if (endCol === null) {\n      endCol = line.length;\n    }\n\n    var endIndex = endCol;\n\n    for (var i = 0; i < line.length; i++) {\n      var char = line[i];\n      lineString += char[exports.CHAR_DATA_CHAR_INDEX];\n\n      if (char[exports.CHAR_DATA_WIDTH_INDEX] === 0) {\n        if (startCol >= i) {\n          startIndex--;\n        }\n\n        if (endCol >= i) {\n          endIndex--;\n        }\n      } else {\n        if (char[exports.CHAR_DATA_CHAR_INDEX].length > 1) {\n          if (startCol > i) {\n            startIndex += char[exports.CHAR_DATA_CHAR_INDEX].length - 1;\n          }\n\n          if (endCol > i) {\n            endIndex += char[exports.CHAR_DATA_CHAR_INDEX].length - 1;\n          }\n        }\n      }\n    }\n\n    if (trimRight) {\n      var rightWhitespaceIndex = lineString.search(/\\s+$/);\n\n      if (rightWhitespaceIndex !== -1) {\n        endIndex = Math.min(endIndex, rightWhitespaceIndex);\n      }\n\n      if (endIndex <= startIndex) {\n        return '';\n      }\n    }\n\n    return lineString.substring(startIndex, endIndex);\n  };\n\n  Buffer.prototype.setupTabStops = function (i) {\n    if (i != null) {\n      if (!this.tabs[i]) {\n        i = this.prevStop(i);\n      }\n    } else {\n      this.tabs = {};\n      i = 0;\n    }\n\n    for (; i < this._terminal.cols; i += this._terminal.options.tabStopWidth) {\n      this.tabs[i] = true;\n    }\n  };\n\n  Buffer.prototype.prevStop = function (x) {\n    if (x == null) {\n      x = this.x;\n    }\n\n    while (!this.tabs[--x] && x > 0);\n\n    return x >= this._terminal.cols ? this._terminal.cols - 1 : x < 0 ? 0 : x;\n  };\n\n  Buffer.prototype.nextStop = function (x) {\n    if (x == null) {\n      x = this.x;\n    }\n\n    while (!this.tabs[++x] && x < this._terminal.cols);\n\n    return x >= this._terminal.cols ? this._terminal.cols - 1 : x < 0 ? 0 : x;\n  };\n\n  return Buffer;\n}();\n\nexports.Buffer = Buffer;","map":null,"metadata":{},"sourceType":"script"}