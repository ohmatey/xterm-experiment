{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar CharAtlas_1 = require(\"./CharAtlas\");\n\nvar Buffer_1 = require(\"../Buffer\");\n\nexports.INVERTED_DEFAULT_COLOR = -1;\nvar DIM_OPACITY = 0.5;\n\nvar BaseRenderLayer = function () {\n  function BaseRenderLayer(_container, id, zIndex, _alpha, _colors) {\n    this._container = _container;\n    this._alpha = _alpha;\n    this._colors = _colors;\n    this._scaledCharWidth = 0;\n    this._scaledCharHeight = 0;\n    this._scaledCellWidth = 0;\n    this._scaledCellHeight = 0;\n    this._scaledCharLeft = 0;\n    this._scaledCharTop = 0;\n    this._canvas = document.createElement('canvas');\n\n    this._canvas.classList.add(\"xterm-\" + id + \"-layer\");\n\n    this._canvas.style.zIndex = zIndex.toString();\n\n    this._initCanvas();\n\n    this._container.appendChild(this._canvas);\n  }\n\n  BaseRenderLayer.prototype._initCanvas = function () {\n    this._ctx = this._canvas.getContext('2d', {\n      alpha: this._alpha\n    });\n\n    if (!this._alpha) {\n      this.clearAll();\n    }\n  };\n\n  BaseRenderLayer.prototype.onOptionsChanged = function (terminal) {};\n\n  BaseRenderLayer.prototype.onBlur = function (terminal) {};\n\n  BaseRenderLayer.prototype.onFocus = function (terminal) {};\n\n  BaseRenderLayer.prototype.onCursorMove = function (terminal) {};\n\n  BaseRenderLayer.prototype.onGridChanged = function (terminal, startRow, endRow) {};\n\n  BaseRenderLayer.prototype.onSelectionChanged = function (terminal, start, end) {};\n\n  BaseRenderLayer.prototype.onThemeChanged = function (terminal, colorSet) {\n    this._refreshCharAtlas(terminal, colorSet);\n  };\n\n  BaseRenderLayer.prototype.setTransparency = function (terminal, alpha) {\n    if (alpha === this._alpha) {\n      return;\n    }\n\n    var oldCanvas = this._canvas;\n    this._alpha = alpha;\n    this._canvas = this._canvas.cloneNode();\n\n    this._initCanvas();\n\n    this._container.replaceChild(this._canvas, oldCanvas);\n\n    this._refreshCharAtlas(terminal, this._colors);\n\n    this.onGridChanged(terminal, 0, terminal.rows - 1);\n  };\n\n  BaseRenderLayer.prototype._refreshCharAtlas = function (terminal, colorSet) {\n    var _this = this;\n\n    if (this._scaledCharWidth <= 0 && this._scaledCharHeight <= 0) {\n      return;\n    }\n\n    this._charAtlas = null;\n    var result = CharAtlas_1.acquireCharAtlas(terminal, colorSet, this._scaledCharWidth, this._scaledCharHeight);\n\n    if (result instanceof HTMLCanvasElement) {\n      this._charAtlas = result;\n    } else {\n      result.then(function (bitmap) {\n        return _this._charAtlas = bitmap;\n      });\n    }\n  };\n\n  BaseRenderLayer.prototype.resize = function (terminal, dim, charSizeChanged) {\n    this._scaledCellWidth = dim.scaledCellWidth;\n    this._scaledCellHeight = dim.scaledCellHeight;\n    this._scaledCharWidth = dim.scaledCharWidth;\n    this._scaledCharHeight = dim.scaledCharHeight;\n    this._scaledCharLeft = dim.scaledCharLeft;\n    this._scaledCharTop = dim.scaledCharTop;\n    this._canvas.width = dim.scaledCanvasWidth;\n    this._canvas.height = dim.scaledCanvasHeight;\n    this._canvas.style.width = dim.canvasWidth + \"px\";\n    this._canvas.style.height = dim.canvasHeight + \"px\";\n\n    if (!this._alpha) {\n      this.clearAll();\n    }\n\n    if (charSizeChanged) {\n      this._refreshCharAtlas(terminal, this._colors);\n    }\n  };\n\n  BaseRenderLayer.prototype.fillCells = function (x, y, width, height) {\n    this._ctx.fillRect(x * this._scaledCellWidth, y * this._scaledCellHeight, width * this._scaledCellWidth, height * this._scaledCellHeight);\n  };\n\n  BaseRenderLayer.prototype.fillBottomLineAtCells = function (x, y, width) {\n    if (width === void 0) {\n      width = 1;\n    }\n\n    this._ctx.fillRect(x * this._scaledCellWidth, (y + 1) * this._scaledCellHeight - window.devicePixelRatio - 1, width * this._scaledCellWidth, window.devicePixelRatio);\n  };\n\n  BaseRenderLayer.prototype.fillLeftLineAtCell = function (x, y) {\n    this._ctx.fillRect(x * this._scaledCellWidth, y * this._scaledCellHeight, window.devicePixelRatio, this._scaledCellHeight);\n  };\n\n  BaseRenderLayer.prototype.strokeRectAtCell = function (x, y, width, height) {\n    this._ctx.lineWidth = window.devicePixelRatio;\n\n    this._ctx.strokeRect(x * this._scaledCellWidth + window.devicePixelRatio / 2, y * this._scaledCellHeight + window.devicePixelRatio / 2, width * this._scaledCellWidth - window.devicePixelRatio, height * this._scaledCellHeight - window.devicePixelRatio);\n  };\n\n  BaseRenderLayer.prototype.clearAll = function () {\n    if (this._alpha) {\n      this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n    } else {\n      this._ctx.fillStyle = this._colors.background;\n\n      this._ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);\n    }\n  };\n\n  BaseRenderLayer.prototype.clearCells = function (x, y, width, height) {\n    if (this._alpha) {\n      this._ctx.clearRect(x * this._scaledCellWidth, y * this._scaledCellHeight, width * this._scaledCellWidth, height * this._scaledCellHeight);\n    } else {\n      this._ctx.fillStyle = this._colors.background;\n\n      this._ctx.fillRect(x * this._scaledCellWidth, y * this._scaledCellHeight, width * this._scaledCellWidth, height * this._scaledCellHeight);\n    }\n  };\n\n  BaseRenderLayer.prototype.fillCharTrueColor = function (terminal, charData, x, y) {\n    this._ctx.font = this._getFont(terminal, false);\n    this._ctx.textBaseline = 'top';\n\n    this._clipRow(terminal, y);\n\n    this._ctx.fillText(charData[Buffer_1.CHAR_DATA_CHAR_INDEX], x * this._scaledCellWidth + this._scaledCharLeft, y * this._scaledCellHeight + this._scaledCharTop);\n  };\n\n  BaseRenderLayer.prototype.drawChar = function (terminal, char, code, width, x, y, fg, bg, bold, dim) {\n    var colorIndex = 0;\n\n    if (fg < 256) {\n      colorIndex = fg + 2;\n    } else {\n      if (bold && terminal.options.enableBold) {\n        colorIndex = 1;\n      }\n    }\n\n    var isAscii = code < 256;\n    var isBasicColor = colorIndex > 1 && fg < 16 && (fg < 8 || bold);\n    var isDefaultColor = fg >= 256;\n    var isDefaultBackground = bg >= 256;\n\n    if (this._charAtlas && isAscii && (isBasicColor || isDefaultColor) && isDefaultBackground) {\n      var charAtlasCellWidth = this._scaledCharWidth + CharAtlas_1.CHAR_ATLAS_CELL_SPACING;\n      var charAtlasCellHeight = this._scaledCharHeight + CharAtlas_1.CHAR_ATLAS_CELL_SPACING;\n\n      if (dim) {\n        this._ctx.globalAlpha = DIM_OPACITY;\n      }\n\n      if (bold && !terminal.options.enableBold) {\n        if (colorIndex > 1) {\n          colorIndex -= 8;\n        }\n      }\n\n      this._ctx.drawImage(this._charAtlas, code * charAtlasCellWidth, colorIndex * charAtlasCellHeight, charAtlasCellWidth, this._scaledCharHeight, x * this._scaledCellWidth + this._scaledCharLeft, y * this._scaledCellHeight + this._scaledCharTop, charAtlasCellWidth, this._scaledCharHeight);\n    } else {\n      this._drawUncachedChar(terminal, char, width, fg, x, y, bold && terminal.options.enableBold, dim);\n    }\n  };\n\n  BaseRenderLayer.prototype._drawUncachedChar = function (terminal, char, width, fg, x, y, bold, dim) {\n    this._ctx.save();\n\n    this._ctx.font = this._getFont(terminal, bold);\n    this._ctx.textBaseline = 'top';\n\n    if (fg === exports.INVERTED_DEFAULT_COLOR) {\n      this._ctx.fillStyle = this._colors.background;\n    } else if (fg < 256) {\n      this._ctx.fillStyle = this._colors.ansi[fg];\n    } else {\n      this._ctx.fillStyle = this._colors.foreground;\n    }\n\n    this._clipRow(terminal, y);\n\n    if (dim) {\n      this._ctx.globalAlpha = DIM_OPACITY;\n    }\n\n    this._ctx.fillText(char, x * this._scaledCellWidth + this._scaledCharLeft, y * this._scaledCellHeight + this._scaledCharTop);\n\n    this._ctx.restore();\n  };\n\n  BaseRenderLayer.prototype._clipRow = function (terminal, y) {\n    this._ctx.beginPath();\n\n    this._ctx.rect(0, y * this._scaledCellHeight, terminal.cols * this._scaledCellWidth, this._scaledCellHeight);\n\n    this._ctx.clip();\n  };\n\n  BaseRenderLayer.prototype._getFont = function (terminal, isBold) {\n    var fontWeight = isBold ? terminal.options.fontWeightBold : terminal.options.fontWeight;\n    return fontWeight + \" \" + terminal.options.fontSize * window.devicePixelRatio + \"px \" + terminal.options.fontFamily;\n  };\n\n  return BaseRenderLayer;\n}();\n\nexports.BaseRenderLayer = BaseRenderLayer;","map":null,"metadata":{},"sourceType":"script"}