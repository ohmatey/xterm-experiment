{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar BaseRenderLayer_1 = require(\"./BaseRenderLayer\");\n\nvar SelectionRenderLayer = function (_super) {\n  __extends(SelectionRenderLayer, _super);\n\n  function SelectionRenderLayer(container, zIndex, colors) {\n    var _this = _super.call(this, container, 'selection', zIndex, true, colors) || this;\n\n    _this._state = {\n      start: null,\n      end: null\n    };\n    return _this;\n  }\n\n  SelectionRenderLayer.prototype.resize = function (terminal, dim, charSizeChanged) {\n    _super.prototype.resize.call(this, terminal, dim, charSizeChanged);\n\n    this._state = {\n      start: null,\n      end: null\n    };\n  };\n\n  SelectionRenderLayer.prototype.reset = function (terminal) {\n    if (this._state.start && this._state.end) {\n      this._state = {\n        start: null,\n        end: null\n      };\n      this.clearAll();\n    }\n  };\n\n  SelectionRenderLayer.prototype.onSelectionChanged = function (terminal, start, end) {\n    if (this._state.start === start || this._state.end === end) {\n      return;\n    }\n\n    this.clearAll();\n\n    if (!start || !end) {\n      return;\n    }\n\n    var viewportStartRow = start[1] - terminal.buffer.ydisp;\n    var viewportEndRow = end[1] - terminal.buffer.ydisp;\n    var viewportCappedStartRow = Math.max(viewportStartRow, 0);\n    var viewportCappedEndRow = Math.min(viewportEndRow, terminal.rows - 1);\n\n    if (viewportCappedStartRow >= terminal.rows || viewportCappedEndRow < 0) {\n      return;\n    }\n\n    var startCol = viewportStartRow === viewportCappedStartRow ? start[0] : 0;\n    var startRowEndCol = viewportCappedStartRow === viewportCappedEndRow ? end[0] : terminal.cols;\n    this._ctx.fillStyle = this._colors.selection;\n    this.fillCells(startCol, viewportCappedStartRow, startRowEndCol - startCol, 1);\n    var middleRowsCount = Math.max(viewportCappedEndRow - viewportCappedStartRow - 1, 0);\n    this.fillCells(0, viewportCappedStartRow + 1, terminal.cols, middleRowsCount);\n\n    if (viewportCappedStartRow !== viewportCappedEndRow) {\n      var endCol = viewportEndRow === viewportCappedEndRow ? end[0] : terminal.cols;\n      this.fillCells(0, viewportCappedEndRow, endCol, 1);\n    }\n\n    this._state.start = [start[0], start[1]];\n    this._state.end = [end[0], end[1]];\n  };\n\n  return SelectionRenderLayer;\n}(BaseRenderLayer_1.BaseRenderLayer);\n\nexports.SelectionRenderLayer = SelectionRenderLayer;","map":null,"metadata":{},"sourceType":"script"}