{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar EscapeSequences_1 = require(\"./EscapeSequences\");\n\nvar Charsets_1 = require(\"./Charsets\");\n\nvar Buffer_1 = require(\"./Buffer\");\n\nvar Types_1 = require(\"./renderer/Types\");\n\nvar CharWidth_1 = require(\"./CharWidth\");\n\nvar InputHandler = function () {\n  function InputHandler(_terminal) {\n    this._terminal = _terminal;\n  }\n\n  InputHandler.prototype.addChar = function (char, code) {\n    if (char >= ' ') {\n      var chWidth = CharWidth_1.wcwidth(code);\n\n      if (this._terminal.charset && this._terminal.charset[char]) {\n        char = this._terminal.charset[char];\n      }\n\n      var row = this._terminal.buffer.y + this._terminal.buffer.ybase;\n\n      if (!chWidth && this._terminal.buffer.x) {\n        if (this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 1]) {\n          if (!this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 1][Buffer_1.CHAR_DATA_WIDTH_INDEX]) {\n            if (this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 2]) {\n              this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 2][Buffer_1.CHAR_DATA_CHAR_INDEX] += char;\n              this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 2][3] = char.charCodeAt(0);\n            }\n          } else {\n            this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 1][Buffer_1.CHAR_DATA_CHAR_INDEX] += char;\n            this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 1][3] = char.charCodeAt(0);\n          }\n\n          this._terminal.updateRange(this._terminal.buffer.y);\n        }\n\n        return;\n      }\n\n      if (this._terminal.buffer.x + chWidth - 1 >= this._terminal.cols) {\n        if (this._terminal.wraparoundMode) {\n          this._terminal.buffer.x = 0;\n          this._terminal.buffer.y++;\n\n          if (this._terminal.buffer.y > this._terminal.buffer.scrollBottom) {\n            this._terminal.buffer.y--;\n\n            this._terminal.scroll(true);\n          } else {\n            this._terminal.buffer.lines.get(this._terminal.buffer.y).isWrapped = true;\n          }\n        } else {\n          if (chWidth === 2) {\n            return;\n          }\n        }\n      }\n\n      row = this._terminal.buffer.y + this._terminal.buffer.ybase;\n\n      if (this._terminal.insertMode) {\n        for (var moves = 0; moves < chWidth; ++moves) {\n          var removed = this._terminal.buffer.lines.get(this._terminal.buffer.y + this._terminal.buffer.ybase).pop();\n\n          if (removed[Buffer_1.CHAR_DATA_WIDTH_INDEX] === 0 && this._terminal.buffer.lines.get(row)[this._terminal.cols - 2] && this._terminal.buffer.lines.get(row)[this._terminal.cols - 2][Buffer_1.CHAR_DATA_WIDTH_INDEX] === 2) {\n            this._terminal.buffer.lines.get(row)[this._terminal.cols - 2] = [this._terminal.curAttr, ' ', 1, ' '.charCodeAt(0)];\n          }\n\n          this._terminal.buffer.lines.get(row).splice(this._terminal.buffer.x, 0, [this._terminal.curAttr, ' ', 1, ' '.charCodeAt(0)]);\n        }\n      }\n\n      this._terminal.buffer.lines.get(row)[this._terminal.buffer.x] = [this._terminal.curAttr, char, chWidth, char.charCodeAt(0)];\n      this._terminal.buffer.x++;\n\n      this._terminal.updateRange(this._terminal.buffer.y);\n\n      if (chWidth === 2) {\n        this._terminal.buffer.lines.get(row)[this._terminal.buffer.x] = [this._terminal.curAttr, '', 0, undefined];\n        this._terminal.buffer.x++;\n      }\n    }\n  };\n\n  InputHandler.prototype.bell = function () {\n    this._terminal.bell();\n  };\n\n  InputHandler.prototype.lineFeed = function () {\n    if (this._terminal.convertEol) {\n      this._terminal.buffer.x = 0;\n    }\n\n    this._terminal.buffer.y++;\n\n    if (this._terminal.buffer.y > this._terminal.buffer.scrollBottom) {\n      this._terminal.buffer.y--;\n\n      this._terminal.scroll();\n    }\n\n    if (this._terminal.buffer.x >= this._terminal.cols) {\n      this._terminal.buffer.x--;\n    }\n\n    this._terminal.emit('linefeed');\n  };\n\n  InputHandler.prototype.carriageReturn = function () {\n    this._terminal.buffer.x = 0;\n  };\n\n  InputHandler.prototype.backspace = function () {\n    if (this._terminal.buffer.x > 0) {\n      this._terminal.buffer.x--;\n    }\n  };\n\n  InputHandler.prototype.tab = function () {\n    this._terminal.buffer.x = this._terminal.buffer.nextStop();\n  };\n\n  InputHandler.prototype.shiftOut = function () {\n    this._terminal.setgLevel(1);\n  };\n\n  InputHandler.prototype.shiftIn = function () {\n    this._terminal.setgLevel(0);\n  };\n\n  InputHandler.prototype.insertChars = function (params) {\n    var param = params[0];\n    if (param < 1) param = 1;\n    var row = this._terminal.buffer.y + this._terminal.buffer.ybase;\n    var j = this._terminal.buffer.x;\n    var ch = [this._terminal.eraseAttr(), ' ', 1, 32];\n\n    while (param-- && j < this._terminal.cols) {\n      this._terminal.buffer.lines.get(row).splice(j++, 0, ch);\n\n      this._terminal.buffer.lines.get(row).pop();\n    }\n  };\n\n  InputHandler.prototype.cursorUp = function (params) {\n    var param = params[0];\n\n    if (param < 1) {\n      param = 1;\n    }\n\n    this._terminal.buffer.y -= param;\n\n    if (this._terminal.buffer.y < 0) {\n      this._terminal.buffer.y = 0;\n    }\n  };\n\n  InputHandler.prototype.cursorDown = function (params) {\n    var param = params[0];\n\n    if (param < 1) {\n      param = 1;\n    }\n\n    this._terminal.buffer.y += param;\n\n    if (this._terminal.buffer.y >= this._terminal.rows) {\n      this._terminal.buffer.y = this._terminal.rows - 1;\n    }\n\n    if (this._terminal.buffer.x >= this._terminal.cols) {\n      this._terminal.buffer.x--;\n    }\n  };\n\n  InputHandler.prototype.cursorForward = function (params) {\n    var param = params[0];\n\n    if (param < 1) {\n      param = 1;\n    }\n\n    this._terminal.buffer.x += param;\n\n    if (this._terminal.buffer.x >= this._terminal.cols) {\n      this._terminal.buffer.x = this._terminal.cols - 1;\n    }\n  };\n\n  InputHandler.prototype.cursorBackward = function (params) {\n    var param = params[0];\n\n    if (param < 1) {\n      param = 1;\n    }\n\n    if (this._terminal.buffer.x >= this._terminal.cols) {\n      this._terminal.buffer.x--;\n    }\n\n    this._terminal.buffer.x -= param;\n\n    if (this._terminal.buffer.x < 0) {\n      this._terminal.buffer.x = 0;\n    }\n  };\n\n  InputHandler.prototype.cursorNextLine = function (params) {\n    var param = params[0];\n\n    if (param < 1) {\n      param = 1;\n    }\n\n    this._terminal.buffer.y += param;\n\n    if (this._terminal.buffer.y >= this._terminal.rows) {\n      this._terminal.buffer.y = this._terminal.rows - 1;\n    }\n\n    this._terminal.buffer.x = 0;\n  };\n\n  InputHandler.prototype.cursorPrecedingLine = function (params) {\n    var param = params[0];\n\n    if (param < 1) {\n      param = 1;\n    }\n\n    this._terminal.buffer.y -= param;\n\n    if (this._terminal.buffer.y < 0) {\n      this._terminal.buffer.y = 0;\n    }\n\n    this._terminal.buffer.x = 0;\n  };\n\n  InputHandler.prototype.cursorCharAbsolute = function (params) {\n    var param = params[0];\n\n    if (param < 1) {\n      param = 1;\n    }\n\n    this._terminal.buffer.x = param - 1;\n  };\n\n  InputHandler.prototype.cursorPosition = function (params) {\n    var col;\n    var row = params[0] - 1;\n\n    if (params.length >= 2) {\n      col = params[1] - 1;\n    } else {\n      col = 0;\n    }\n\n    if (row < 0) {\n      row = 0;\n    } else if (row >= this._terminal.rows) {\n      row = this._terminal.rows - 1;\n    }\n\n    if (col < 0) {\n      col = 0;\n    } else if (col >= this._terminal.cols) {\n      col = this._terminal.cols - 1;\n    }\n\n    this._terminal.buffer.x = col;\n    this._terminal.buffer.y = row;\n  };\n\n  InputHandler.prototype.cursorForwardTab = function (params) {\n    var param = params[0] || 1;\n\n    while (param--) {\n      this._terminal.buffer.x = this._terminal.buffer.nextStop();\n    }\n  };\n\n  InputHandler.prototype.eraseInDisplay = function (params) {\n    var j;\n\n    switch (params[0]) {\n      case 0:\n        this._terminal.eraseRight(this._terminal.buffer.x, this._terminal.buffer.y);\n\n        j = this._terminal.buffer.y + 1;\n\n        for (; j < this._terminal.rows; j++) {\n          this._terminal.eraseLine(j);\n        }\n\n        break;\n\n      case 1:\n        this._terminal.eraseLeft(this._terminal.buffer.x, this._terminal.buffer.y);\n\n        j = this._terminal.buffer.y;\n\n        while (j--) {\n          this._terminal.eraseLine(j);\n        }\n\n        break;\n\n      case 2:\n        j = this._terminal.rows;\n\n        while (j--) this._terminal.eraseLine(j);\n\n        break;\n\n      case 3:\n        var scrollBackSize = this._terminal.buffer.lines.length - this._terminal.rows;\n\n        if (scrollBackSize > 0) {\n          this._terminal.buffer.lines.trimStart(scrollBackSize);\n\n          this._terminal.buffer.ybase = Math.max(this._terminal.buffer.ybase - scrollBackSize, 0);\n          this._terminal.buffer.ydisp = Math.max(this._terminal.buffer.ydisp - scrollBackSize, 0);\n\n          this._terminal.emit('scroll', 0);\n        }\n\n        break;\n    }\n  };\n\n  InputHandler.prototype.eraseInLine = function (params) {\n    switch (params[0]) {\n      case 0:\n        this._terminal.eraseRight(this._terminal.buffer.x, this._terminal.buffer.y);\n\n        break;\n\n      case 1:\n        this._terminal.eraseLeft(this._terminal.buffer.x, this._terminal.buffer.y);\n\n        break;\n\n      case 2:\n        this._terminal.eraseLine(this._terminal.buffer.y);\n\n        break;\n    }\n  };\n\n  InputHandler.prototype.insertLines = function (params) {\n    var param = params[0];\n\n    if (param < 1) {\n      param = 1;\n    }\n\n    var row = this._terminal.buffer.y + this._terminal.buffer.ybase;\n    var scrollBottomRowsOffset = this._terminal.rows - 1 - this._terminal.buffer.scrollBottom;\n    var scrollBottomAbsolute = this._terminal.rows - 1 + this._terminal.buffer.ybase - scrollBottomRowsOffset + 1;\n\n    while (param--) {\n      this._terminal.buffer.lines.splice(scrollBottomAbsolute - 1, 1);\n\n      this._terminal.buffer.lines.splice(row, 0, this._terminal.blankLine(true));\n    }\n\n    this._terminal.updateRange(this._terminal.buffer.y);\n\n    this._terminal.updateRange(this._terminal.buffer.scrollBottom);\n  };\n\n  InputHandler.prototype.deleteLines = function (params) {\n    var param = params[0];\n\n    if (param < 1) {\n      param = 1;\n    }\n\n    var row = this._terminal.buffer.y + this._terminal.buffer.ybase;\n    var j;\n    j = this._terminal.rows - 1 - this._terminal.buffer.scrollBottom;\n    j = this._terminal.rows - 1 + this._terminal.buffer.ybase - j;\n\n    while (param--) {\n      this._terminal.buffer.lines.splice(row, 1);\n\n      this._terminal.buffer.lines.splice(j, 0, this._terminal.blankLine(true));\n    }\n\n    this._terminal.updateRange(this._terminal.buffer.y);\n\n    this._terminal.updateRange(this._terminal.buffer.scrollBottom);\n  };\n\n  InputHandler.prototype.deleteChars = function (params) {\n    var param = params[0];\n\n    if (param < 1) {\n      param = 1;\n    }\n\n    var row = this._terminal.buffer.y + this._terminal.buffer.ybase;\n    var ch = [this._terminal.eraseAttr(), ' ', 1, 32];\n\n    while (param--) {\n      this._terminal.buffer.lines.get(row).splice(this._terminal.buffer.x, 1);\n\n      this._terminal.buffer.lines.get(row).push(ch);\n    }\n\n    this._terminal.updateRange(this._terminal.buffer.y);\n  };\n\n  InputHandler.prototype.scrollUp = function (params) {\n    var param = params[0] || 1;\n\n    while (param--) {\n      this._terminal.buffer.lines.splice(this._terminal.buffer.ybase + this._terminal.buffer.scrollTop, 1);\n\n      this._terminal.buffer.lines.splice(this._terminal.buffer.ybase + this._terminal.buffer.scrollBottom, 0, this._terminal.blankLine());\n    }\n\n    this._terminal.updateRange(this._terminal.buffer.scrollTop);\n\n    this._terminal.updateRange(this._terminal.buffer.scrollBottom);\n  };\n\n  InputHandler.prototype.scrollDown = function (params) {\n    var param = params[0] || 1;\n\n    while (param--) {\n      this._terminal.buffer.lines.splice(this._terminal.buffer.ybase + this._terminal.buffer.scrollBottom, 1);\n\n      this._terminal.buffer.lines.splice(this._terminal.buffer.ybase + this._terminal.buffer.scrollTop, 0, this._terminal.blankLine());\n    }\n\n    this._terminal.updateRange(this._terminal.buffer.scrollTop);\n\n    this._terminal.updateRange(this._terminal.buffer.scrollBottom);\n  };\n\n  InputHandler.prototype.eraseChars = function (params) {\n    var param = params[0];\n\n    if (param < 1) {\n      param = 1;\n    }\n\n    var row = this._terminal.buffer.y + this._terminal.buffer.ybase;\n    var j = this._terminal.buffer.x;\n    var ch = [this._terminal.eraseAttr(), ' ', 1, 32];\n\n    while (param-- && j < this._terminal.cols) {\n      this._terminal.buffer.lines.get(row)[j++] = ch;\n    }\n  };\n\n  InputHandler.prototype.cursorBackwardTab = function (params) {\n    var param = params[0] || 1;\n\n    while (param--) {\n      this._terminal.buffer.x = this._terminal.buffer.prevStop();\n    }\n  };\n\n  InputHandler.prototype.charPosAbsolute = function (params) {\n    var param = params[0];\n\n    if (param < 1) {\n      param = 1;\n    }\n\n    this._terminal.buffer.x = param - 1;\n\n    if (this._terminal.buffer.x >= this._terminal.cols) {\n      this._terminal.buffer.x = this._terminal.cols - 1;\n    }\n  };\n\n  InputHandler.prototype.HPositionRelative = function (params) {\n    var param = params[0];\n\n    if (param < 1) {\n      param = 1;\n    }\n\n    this._terminal.buffer.x += param;\n\n    if (this._terminal.buffer.x >= this._terminal.cols) {\n      this._terminal.buffer.x = this._terminal.cols - 1;\n    }\n  };\n\n  InputHandler.prototype.repeatPrecedingCharacter = function (params) {\n    var param = params[0] || 1;\n\n    var line = this._terminal.buffer.lines.get(this._terminal.buffer.ybase + this._terminal.buffer.y);\n\n    var ch = line[this._terminal.buffer.x - 1] || [this._terminal.defAttr, ' ', 1, 32];\n\n    while (param--) {\n      line[this._terminal.buffer.x++] = ch;\n    }\n  };\n\n  InputHandler.prototype.sendDeviceAttributes = function (params) {\n    if (params[0] > 0) {\n      return;\n    }\n\n    if (!this._terminal.prefix) {\n      if (this._terminal.is('xterm') || this._terminal.is('rxvt-unicode') || this._terminal.is('screen')) {\n        this._terminal.send(EscapeSequences_1.C0.ESC + '[?1;2c');\n      } else if (this._terminal.is('linux')) {\n        this._terminal.send(EscapeSequences_1.C0.ESC + '[?6c');\n      }\n    } else if (this._terminal.prefix === '>') {\n      if (this._terminal.is('xterm')) {\n        this._terminal.send(EscapeSequences_1.C0.ESC + '[>0;276;0c');\n      } else if (this._terminal.is('rxvt-unicode')) {\n        this._terminal.send(EscapeSequences_1.C0.ESC + '[>85;95;0c');\n      } else if (this._terminal.is('linux')) {\n        this._terminal.send(params[0] + 'c');\n      } else if (this._terminal.is('screen')) {\n        this._terminal.send(EscapeSequences_1.C0.ESC + '[>83;40003;0c');\n      }\n    }\n  };\n\n  InputHandler.prototype.linePosAbsolute = function (params) {\n    var param = params[0];\n\n    if (param < 1) {\n      param = 1;\n    }\n\n    this._terminal.buffer.y = param - 1;\n\n    if (this._terminal.buffer.y >= this._terminal.rows) {\n      this._terminal.buffer.y = this._terminal.rows - 1;\n    }\n  };\n\n  InputHandler.prototype.VPositionRelative = function (params) {\n    var param = params[0];\n\n    if (param < 1) {\n      param = 1;\n    }\n\n    this._terminal.buffer.y += param;\n\n    if (this._terminal.buffer.y >= this._terminal.rows) {\n      this._terminal.buffer.y = this._terminal.rows - 1;\n    }\n\n    if (this._terminal.buffer.x >= this._terminal.cols) {\n      this._terminal.buffer.x--;\n    }\n  };\n\n  InputHandler.prototype.HVPosition = function (params) {\n    if (params[0] < 1) params[0] = 1;\n    if (params[1] < 1) params[1] = 1;\n    this._terminal.buffer.y = params[0] - 1;\n\n    if (this._terminal.buffer.y >= this._terminal.rows) {\n      this._terminal.buffer.y = this._terminal.rows - 1;\n    }\n\n    this._terminal.buffer.x = params[1] - 1;\n\n    if (this._terminal.buffer.x >= this._terminal.cols) {\n      this._terminal.buffer.x = this._terminal.cols - 1;\n    }\n  };\n\n  InputHandler.prototype.tabClear = function (params) {\n    var param = params[0];\n\n    if (param <= 0) {\n      delete this._terminal.buffer.tabs[this._terminal.buffer.x];\n    } else if (param === 3) {\n      this._terminal.buffer.tabs = {};\n    }\n  };\n\n  InputHandler.prototype.setMode = function (params) {\n    if (params.length > 1) {\n      for (var i = 0; i < params.length; i++) {\n        this.setMode([params[i]]);\n      }\n\n      return;\n    }\n\n    if (!this._terminal.prefix) {\n      switch (params[0]) {\n        case 4:\n          this._terminal.insertMode = true;\n          break;\n\n        case 20:\n          break;\n      }\n    } else if (this._terminal.prefix === '?') {\n      switch (params[0]) {\n        case 1:\n          this._terminal.applicationCursor = true;\n          break;\n\n        case 2:\n          this._terminal.setgCharset(0, Charsets_1.DEFAULT_CHARSET);\n\n          this._terminal.setgCharset(1, Charsets_1.DEFAULT_CHARSET);\n\n          this._terminal.setgCharset(2, Charsets_1.DEFAULT_CHARSET);\n\n          this._terminal.setgCharset(3, Charsets_1.DEFAULT_CHARSET);\n\n          break;\n\n        case 3:\n          this._terminal.savedCols = this._terminal.cols;\n\n          this._terminal.resize(132, this._terminal.rows);\n\n          break;\n\n        case 6:\n          this._terminal.originMode = true;\n          break;\n\n        case 7:\n          this._terminal.wraparoundMode = true;\n          break;\n\n        case 12:\n          break;\n\n        case 66:\n          this._terminal.log('Serial port requested application keypad.');\n\n          this._terminal.applicationKeypad = true;\n\n          this._terminal.viewport.syncScrollArea();\n\n          break;\n\n        case 9:\n        case 1000:\n        case 1002:\n        case 1003:\n          this._terminal.x10Mouse = params[0] === 9;\n          this._terminal.vt200Mouse = params[0] === 1000;\n          this._terminal.normalMouse = params[0] > 1000;\n          this._terminal.mouseEvents = true;\n\n          this._terminal.element.classList.add('enable-mouse-events');\n\n          this._terminal.selectionManager.disable();\n\n          this._terminal.log('Binding to mouse events.');\n\n          break;\n\n        case 1004:\n          this._terminal.sendFocus = true;\n          break;\n\n        case 1005:\n          this._terminal.utfMouse = true;\n          break;\n\n        case 1006:\n          this._terminal.sgrMouse = true;\n          break;\n\n        case 1015:\n          this._terminal.urxvtMouse = true;\n          break;\n\n        case 25:\n          this._terminal.cursorHidden = false;\n          break;\n\n        case 1049:\n        case 47:\n        case 1047:\n          this._terminal.buffers.activateAltBuffer();\n\n          this._terminal.viewport.syncScrollArea();\n\n          this._terminal.showCursor();\n\n          break;\n\n        case 2004:\n          this._terminal.bracketedPasteMode = true;\n          break;\n      }\n    }\n  };\n\n  InputHandler.prototype.resetMode = function (params) {\n    if (params.length > 1) {\n      for (var i = 0; i < params.length; i++) {\n        this.resetMode([params[i]]);\n      }\n\n      return;\n    }\n\n    if (!this._terminal.prefix) {\n      switch (params[0]) {\n        case 4:\n          this._terminal.insertMode = false;\n          break;\n\n        case 20:\n          break;\n      }\n    } else if (this._terminal.prefix === '?') {\n      switch (params[0]) {\n        case 1:\n          this._terminal.applicationCursor = false;\n          break;\n\n        case 3:\n          if (this._terminal.cols === 132 && this._terminal.savedCols) {\n            this._terminal.resize(this._terminal.savedCols, this._terminal.rows);\n          }\n\n          delete this._terminal.savedCols;\n          break;\n\n        case 6:\n          this._terminal.originMode = false;\n          break;\n\n        case 7:\n          this._terminal.wraparoundMode = false;\n          break;\n\n        case 12:\n          break;\n\n        case 66:\n          this._terminal.log('Switching back to normal keypad.');\n\n          this._terminal.applicationKeypad = false;\n\n          this._terminal.viewport.syncScrollArea();\n\n          break;\n\n        case 9:\n        case 1000:\n        case 1002:\n        case 1003:\n          this._terminal.x10Mouse = false;\n          this._terminal.vt200Mouse = false;\n          this._terminal.normalMouse = false;\n          this._terminal.mouseEvents = false;\n\n          this._terminal.element.classList.remove('enable-mouse-events');\n\n          this._terminal.selectionManager.enable();\n\n          break;\n\n        case 1004:\n          this._terminal.sendFocus = false;\n          break;\n\n        case 1005:\n          this._terminal.utfMouse = false;\n          break;\n\n        case 1006:\n          this._terminal.sgrMouse = false;\n          break;\n\n        case 1015:\n          this._terminal.urxvtMouse = false;\n          break;\n\n        case 25:\n          this._terminal.cursorHidden = true;\n          break;\n\n        case 1049:\n        case 47:\n        case 1047:\n          this._terminal.buffers.activateNormalBuffer();\n\n          this._terminal.refresh(0, this._terminal.rows - 1);\n\n          this._terminal.viewport.syncScrollArea();\n\n          this._terminal.showCursor();\n\n          break;\n\n        case 2004:\n          this._terminal.bracketedPasteMode = false;\n          break;\n      }\n    }\n  };\n\n  InputHandler.prototype.charAttributes = function (params) {\n    if (params.length === 1 && params[0] === 0) {\n      this._terminal.curAttr = this._terminal.defAttr;\n      return;\n    }\n\n    var l = params.length;\n    var flags = this._terminal.curAttr >> 18;\n    var fg = this._terminal.curAttr >> 9 & 0x1ff;\n    var bg = this._terminal.curAttr & 0x1ff;\n    var p;\n\n    for (var i = 0; i < l; i++) {\n      p = params[i];\n\n      if (p >= 30 && p <= 37) {\n        fg = p - 30;\n      } else if (p >= 40 && p <= 47) {\n        bg = p - 40;\n      } else if (p >= 90 && p <= 97) {\n        p += 8;\n        fg = p - 90;\n      } else if (p >= 100 && p <= 107) {\n        p += 8;\n        bg = p - 100;\n      } else if (p === 0) {\n        flags = this._terminal.defAttr >> 18;\n        fg = this._terminal.defAttr >> 9 & 0x1ff;\n        bg = this._terminal.defAttr & 0x1ff;\n      } else if (p === 1) {\n        flags |= Types_1.FLAGS.BOLD;\n      } else if (p === 4) {\n        flags |= Types_1.FLAGS.UNDERLINE;\n      } else if (p === 5) {\n        flags |= Types_1.FLAGS.BLINK;\n      } else if (p === 7) {\n        flags |= Types_1.FLAGS.INVERSE;\n      } else if (p === 8) {\n        flags |= Types_1.FLAGS.INVISIBLE;\n      } else if (p === 2) {\n        flags |= Types_1.FLAGS.DIM;\n      } else if (p === 22) {\n        flags &= ~Types_1.FLAGS.BOLD;\n        flags &= ~Types_1.FLAGS.DIM;\n      } else if (p === 24) {\n        flags &= ~Types_1.FLAGS.UNDERLINE;\n      } else if (p === 25) {\n        flags &= ~Types_1.FLAGS.BLINK;\n      } else if (p === 27) {\n        flags &= ~Types_1.FLAGS.INVERSE;\n      } else if (p === 28) {\n        flags &= ~Types_1.FLAGS.INVISIBLE;\n      } else if (p === 39) {\n        fg = this._terminal.defAttr >> 9 & 0x1ff;\n      } else if (p === 49) {\n        bg = this._terminal.defAttr & 0x1ff;\n      } else if (p === 38) {\n        if (params[i + 1] === 2) {\n          i += 2;\n          fg = this._terminal.matchColor(params[i] & 0xff, params[i + 1] & 0xff, params[i + 2] & 0xff);\n          if (fg === -1) fg = 0x1ff;\n          i += 2;\n        } else if (params[i + 1] === 5) {\n          i += 2;\n          p = params[i] & 0xff;\n          fg = p;\n        }\n      } else if (p === 48) {\n        if (params[i + 1] === 2) {\n          i += 2;\n          bg = this._terminal.matchColor(params[i] & 0xff, params[i + 1] & 0xff, params[i + 2] & 0xff);\n          if (bg === -1) bg = 0x1ff;\n          i += 2;\n        } else if (params[i + 1] === 5) {\n          i += 2;\n          p = params[i] & 0xff;\n          bg = p;\n        }\n      } else if (p === 100) {\n        fg = this._terminal.defAttr >> 9 & 0x1ff;\n        bg = this._terminal.defAttr & 0x1ff;\n      } else {\n        this._terminal.error('Unknown SGR attribute: %d.', p);\n      }\n    }\n\n    this._terminal.curAttr = flags << 18 | fg << 9 | bg;\n  };\n\n  InputHandler.prototype.deviceStatus = function (params) {\n    if (!this._terminal.prefix) {\n      switch (params[0]) {\n        case 5:\n          this._terminal.send(EscapeSequences_1.C0.ESC + '[0n');\n\n          break;\n\n        case 6:\n          this._terminal.send(EscapeSequences_1.C0.ESC + '[' + (this._terminal.buffer.y + 1) + ';' + (this._terminal.buffer.x + 1) + 'R');\n\n          break;\n      }\n    } else if (this._terminal.prefix === '?') {\n      switch (params[0]) {\n        case 6:\n          this._terminal.send(EscapeSequences_1.C0.ESC + '[?' + (this._terminal.buffer.y + 1) + ';' + (this._terminal.buffer.x + 1) + 'R');\n\n          break;\n\n        case 15:\n          break;\n\n        case 25:\n          break;\n\n        case 26:\n          break;\n\n        case 53:\n          break;\n      }\n    }\n  };\n\n  InputHandler.prototype.softReset = function (params) {\n    this._terminal.cursorHidden = false;\n    this._terminal.insertMode = false;\n    this._terminal.originMode = false;\n    this._terminal.wraparoundMode = true;\n    this._terminal.applicationKeypad = false;\n\n    this._terminal.viewport.syncScrollArea();\n\n    this._terminal.applicationCursor = false;\n    this._terminal.buffer.scrollTop = 0;\n    this._terminal.buffer.scrollBottom = this._terminal.rows - 1;\n    this._terminal.curAttr = this._terminal.defAttr;\n    this._terminal.buffer.x = this._terminal.buffer.y = 0;\n    this._terminal.charset = null;\n    this._terminal.glevel = 0;\n    this._terminal.charsets = [null];\n  };\n\n  InputHandler.prototype.setCursorStyle = function (params) {\n    var param = params[0] < 1 ? 1 : params[0];\n\n    switch (param) {\n      case 1:\n      case 2:\n        this._terminal.setOption('cursorStyle', 'block');\n\n        break;\n\n      case 3:\n      case 4:\n        this._terminal.setOption('cursorStyle', 'underline');\n\n        break;\n\n      case 5:\n      case 6:\n        this._terminal.setOption('cursorStyle', 'bar');\n\n        break;\n    }\n\n    var isBlinking = param % 2 === 1;\n\n    this._terminal.setOption('cursorBlink', isBlinking);\n  };\n\n  InputHandler.prototype.setScrollRegion = function (params) {\n    if (this._terminal.prefix) return;\n    this._terminal.buffer.scrollTop = (params[0] || 1) - 1;\n    this._terminal.buffer.scrollBottom = (params[1] && params[1] <= this._terminal.rows ? params[1] : this._terminal.rows) - 1;\n    this._terminal.buffer.x = 0;\n    this._terminal.buffer.y = 0;\n  };\n\n  InputHandler.prototype.saveCursor = function (params) {\n    this._terminal.buffer.savedX = this._terminal.buffer.x;\n    this._terminal.buffer.savedY = this._terminal.buffer.y;\n  };\n\n  InputHandler.prototype.restoreCursor = function (params) {\n    this._terminal.buffer.x = this._terminal.buffer.savedX || 0;\n    this._terminal.buffer.y = this._terminal.buffer.savedY || 0;\n  };\n\n  return InputHandler;\n}();\n\nexports.InputHandler = InputHandler;","map":null,"metadata":{},"sourceType":"script"}