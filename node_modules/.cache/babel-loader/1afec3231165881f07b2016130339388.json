{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar FALLBACK_SCROLL_BAR_WIDTH = 15;\n\nvar Viewport = function () {\n  function Viewport(terminal, viewportElement, scrollArea, charMeasure) {\n    var _this = this;\n\n    this.terminal = terminal;\n    this.viewportElement = viewportElement;\n    this.scrollArea = scrollArea;\n    this.charMeasure = charMeasure;\n    this.scrollBarWidth = 0;\n    this.currentRowHeight = 0;\n    this.lastRecordedBufferLength = 0;\n    this.lastRecordedViewportHeight = 0;\n    this.lastRecordedBufferHeight = 0;\n    this.scrollBarWidth = this.viewportElement.offsetWidth - this.scrollArea.offsetWidth || FALLBACK_SCROLL_BAR_WIDTH;\n    this.viewportElement.addEventListener('scroll', this.onScroll.bind(this));\n    setTimeout(function () {\n      return _this.syncScrollArea();\n    }, 0);\n  }\n\n  Viewport.prototype.onThemeChanged = function (colors) {\n    this.viewportElement.style.backgroundColor = colors.background;\n  };\n\n  Viewport.prototype.refresh = function () {\n    if (this.charMeasure.height > 0) {\n      this.currentRowHeight = this.terminal.renderer.dimensions.scaledCellHeight / window.devicePixelRatio;\n      this.lastRecordedViewportHeight = this.viewportElement.offsetHeight;\n      var newBufferHeight = Math.round(this.currentRowHeight * this.lastRecordedBufferLength) + (this.lastRecordedViewportHeight - this.terminal.renderer.dimensions.canvasHeight);\n\n      if (this.lastRecordedBufferHeight !== newBufferHeight) {\n        this.lastRecordedBufferHeight = newBufferHeight;\n        this.scrollArea.style.height = this.lastRecordedBufferHeight + 'px';\n      }\n    }\n  };\n\n  Viewport.prototype.syncScrollArea = function () {\n    if (this.lastRecordedBufferLength !== this.terminal.buffer.lines.length) {\n      this.lastRecordedBufferLength = this.terminal.buffer.lines.length;\n      this.refresh();\n    } else if (this.lastRecordedViewportHeight !== this.terminal.renderer.dimensions.canvasHeight) {\n      this.refresh();\n    } else {\n      if (this.terminal.renderer.dimensions.scaledCellHeight / window.devicePixelRatio !== this.currentRowHeight) {\n        this.refresh();\n      }\n    }\n\n    var scrollTop = this.terminal.buffer.ydisp * this.currentRowHeight;\n\n    if (this.viewportElement.scrollTop !== scrollTop) {\n      this.viewportElement.scrollTop = scrollTop;\n    }\n  };\n\n  Viewport.prototype.onScroll = function (ev) {\n    if (!this.viewportElement.offsetParent) {\n      return;\n    }\n\n    var newRow = Math.round(this.viewportElement.scrollTop / this.currentRowHeight);\n    var diff = newRow - this.terminal.buffer.ydisp;\n    this.terminal.scrollLines(diff, true);\n  };\n\n  Viewport.prototype.onWheel = function (ev) {\n    if (ev.deltaY === 0) {\n      return;\n    }\n\n    var multiplier = 1;\n\n    if (ev.deltaMode === WheelEvent.DOM_DELTA_LINE) {\n      multiplier = this.currentRowHeight;\n    } else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\n      multiplier = this.currentRowHeight * this.terminal.rows;\n    }\n\n    this.viewportElement.scrollTop += ev.deltaY * multiplier;\n    ev.preventDefault();\n  };\n\n  Viewport.prototype.onTouchStart = function (ev) {\n    this.lastTouchY = ev.touches[0].pageY;\n  };\n\n  Viewport.prototype.onTouchMove = function (ev) {\n    var deltaY = this.lastTouchY - ev.touches[0].pageY;\n    this.lastTouchY = ev.touches[0].pageY;\n\n    if (deltaY === 0) {\n      return;\n    }\n\n    this.viewportElement.scrollTop += deltaY;\n    ev.preventDefault();\n  };\n\n  return Viewport;\n}();\n\nexports.Viewport = Viewport;","map":null,"metadata":{},"sourceType":"script"}