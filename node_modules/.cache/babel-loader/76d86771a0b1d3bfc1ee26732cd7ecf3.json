{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/projects/ols/xterm-test/src/components/XtermTerminal.js\";\nimport React, { Component } from 'react';\nimport { XTerm, Terminal } from 'react-xterm';\n\nclass XtermTerminal extends Component {\n  componentDidMount() {\n    runFakeTerminal(this.refs.xterm); // this.sendToTerminal('')\n  }\n\n  sendToTerminal(text) {\n    this.refs.xterm && this.refs.xterm.writeln(text);\n  }\n\n  fitTerminal() {\n    this.refs.xterm && this.refs.xterm.fit();\n  }\n\n  throttleConsoleResize(size) {\n    this.fitTerminal();\n    console.log('resizing');\n  }\n\n  render() {\n    return React.createElement(XTerm, {\n      ref: \"xterm\",\n      style: {\n        addons: ['fit', 'fullscreen', 'search'],\n        overflow: 'hidden',\n        width: '100%',\n        height: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default XtermTerminal;\n\nfunction runFakeTerminal(xterm) {\n  const term = xterm.getTerminal();\n  var shellprompt = '$ ';\n\n  function prompt(showShellPrompt) {\n    xterm.write('\\r\\n' + (showShellPrompt || shellprompt));\n  }\n\n  xterm.writeln('Welcome to xterm.js');\n  xterm.writeln('This is a local terminal emulation, without a real terminal in the back-end.');\n  xterm.writeln('Type some keys and commands to play around.');\n  xterm.writeln('');\n  prompt();\n  term.on('key', function (key, ev) {\n    var printable = !ev.altKey && !ev.ctrlKey && !ev.metaKey;\n\n    if (ev.keyCode === 13) {\n      prompt();\n      console.log('sending cmd to somewhere');\n      setTimeout(() => {\n        console.log('Recieved by server');\n        prompt();\n        xterm.writeln(\"cmd failed :: no cmd's work!\");\n        prompt();\n      }, 200); // } else if (ev.keyCode == 8) {\n      //   // Do not delete the prompt\n      //   if (term['x'] > 2) {\n      //     xterm.write('\\b \\b')\n      //   }\n    } else if (printable) {\n      xterm.write(key);\n    }\n  });\n  term.on('paste', (data, ev) => {\n    xterm.write(data);\n  });\n}","map":{"version":3,"sources":["/Users/admin/Documents/projects/ols/xterm-test/src/components/XtermTerminal.js"],"names":["React","Component","XTerm","Terminal","XtermTerminal","componentDidMount","runFakeTerminal","refs","xterm","sendToTerminal","text","writeln","fitTerminal","fit","throttleConsoleResize","size","console","log","render","addons","overflow","width","height","term","getTerminal","shellprompt","prompt","showShellPrompt","write","on","key","ev","printable","altKey","ctrlKey","metaKey","keyCode","setTimeout","data"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,aAAhC;;AAEA,MAAMC,aAAN,SAA4BH,SAA5B,CAAsC;AACpCI,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,eAAe,CAAC,KAAKC,IAAL,CAAUC,KAAX,CAAf,CADkB,CAGlB;AACD;;AAEDC,EAAAA,cAAc,CAACC,IAAD,EAAO;AACnB,SAAKH,IAAL,CAAUC,KAAV,IAAmB,KAAKD,IAAL,CAAUC,KAAV,CAAgBG,OAAhB,CAAwBD,IAAxB,CAAnB;AACD;;AAEDE,EAAAA,WAAW,GAAG;AACZ,SAAKL,IAAL,CAAUC,KAAV,IAAmB,KAAKD,IAAL,CAAUC,KAAV,CAAgBK,GAAhB,EAAnB;AACD;;AAEDC,EAAAA,qBAAqB,CAACC,IAAD,EAAO;AAC1B,SAAKH,WAAL;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAC,OAAX;AAAmB,MAAA,KAAK,EAAE;AACxBC,QAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,YAAR,EAAsB,QAAtB,CADgB;AAExBC,QAAAA,QAAQ,EAAE,QAFc;AAGxBC,QAAAA,KAAK,EAAE,MAHiB;AAIxBC,QAAAA,MAAM,EAAE;AAJgB,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAQD;;AA7BmC;;AAgCtC,eAAelB,aAAf;;AAEA,SAASE,eAAT,CAAyBE,KAAzB,EAAuC;AACrC,QAAMe,IAAc,GAAGf,KAAK,CAACgB,WAAN,EAAvB;AACA,MAAIC,WAAW,GAAG,IAAlB;;AAEA,WAASC,MAAT,CAAiBC,eAAjB,EAAkC;AAChCnB,IAAAA,KAAK,CAACoB,KAAN,CAAY,UAAUD,eAAe,IAAIF,WAA7B,CAAZ;AACD;;AACDjB,EAAAA,KAAK,CAACG,OAAN,CAAc,qBAAd;AACAH,EAAAA,KAAK,CAACG,OAAN,CAAc,8EAAd;AACAH,EAAAA,KAAK,CAACG,OAAN,CAAc,6CAAd;AACAH,EAAAA,KAAK,CAACG,OAAN,CAAc,EAAd;AACAe,EAAAA,MAAM;AAENH,EAAAA,IAAI,CAACM,EAAL,CAAQ,KAAR,EAAe,UAAUC,GAAV,EAAeC,EAAf,EAAmB;AAChC,QAAIC,SAAS,GACX,CAACD,EAAE,CAACE,MAAJ,IAAc,CAACF,EAAE,CAACG,OAAlB,IAA6B,CAACH,EAAE,CAACI,OADnC;;AAIA,QAAIJ,EAAE,CAACK,OAAH,KAAe,EAAnB,EAAuB;AACrBV,MAAAA,MAAM;AACNV,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AAEAoB,MAAAA,UAAU,CAAC,MAAM;AACfrB,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAS,QAAAA,MAAM;AACNlB,QAAAA,KAAK,CAACG,OAAN;AACAe,QAAAA,MAAM;AACP,OALS,EAKP,GALO,CAAV,CAJqB,CAUvB;AACA;AACA;AACA;AACA;AACC,KAfD,MAeO,IAAIM,SAAJ,EAAe;AACpBxB,MAAAA,KAAK,CAACoB,KAAN,CAAYE,GAAZ;AACD;AACF,GAvBD;AAyBAP,EAAAA,IAAI,CAACM,EAAL,CAAQ,OAAR,EAAiB,CAACS,IAAD,EAAOP,EAAP,KAAc;AAC7BvB,IAAAA,KAAK,CAACoB,KAAN,CAAYU,IAAZ;AACD,GAFD;AAGD","sourcesContent":["import React, { Component } from 'react'\nimport { XTerm, Terminal } from 'react-xterm'\n\nclass XtermTerminal extends Component {\n  componentDidMount() {\n    runFakeTerminal(this.refs.xterm)\n\n    // this.sendToTerminal('')\n  }\n\n  sendToTerminal(text) {\n    this.refs.xterm && this.refs.xterm.writeln(text)\n  }\n\n  fitTerminal() {\n    this.refs.xterm && this.refs.xterm.fit()\n  }\n\n  throttleConsoleResize(size) {\n    this.fitTerminal()\n    console.log('resizing');\n  }\n\n  render() {\n    return (\n      <XTerm ref='xterm' style={{\n        addons: ['fit', 'fullscreen', 'search'],\n        overflow: 'hidden',\n        width: '100%',\n        height: '100%'\n      }} />\n    )\n  }\n}\n\nexport default XtermTerminal\n\nfunction runFakeTerminal(xterm: XTerm) {\n  const term: Terminal = xterm.getTerminal()\n  var shellprompt = '$ '\n\n  function prompt (showShellPrompt) {\n    xterm.write('\\r\\n' + (showShellPrompt || shellprompt))\n  }\n  xterm.writeln('Welcome to xterm.js')\n  xterm.writeln('This is a local terminal emulation, without a real terminal in the back-end.')\n  xterm.writeln('Type some keys and commands to play around.')\n  xterm.writeln('')\n  prompt()\n\n  term.on('key', function (key, ev) {\n    var printable = (\n      !ev.altKey && !ev.ctrlKey && !ev.metaKey\n    )\n\n    if (ev.keyCode === 13) {\n      prompt()\n      console.log('sending cmd to somewhere');\n\n      setTimeout(() => {\n        console.log('Recieved by server');\n        prompt()\n        xterm.writeln(`cmd failed :: no cmd's work!`)\n        prompt()\n      }, 200)\n    // } else if (ev.keyCode == 8) {\n    //   // Do not delete the prompt\n    //   if (term['x'] > 2) {\n    //     xterm.write('\\b \\b')\n    //   }\n    } else if (printable) {\n      xterm.write(key)\n    }\n  })\n\n  term.on('paste', (data, ev) => {\n    xterm.write(data)\n  })\n}\n"]},"metadata":{},"sourceType":"module"}