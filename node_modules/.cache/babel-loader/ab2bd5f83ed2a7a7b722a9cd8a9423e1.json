{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/projects/ols/xterm-test/src/components/XtermTerminal.js\";\nimport React, { Component } from 'react';\nimport { XTerm, Terminal } from 'react-xterm';\n\nclass XtermTerminal extends Component {\n  componentDidMount() {\n    runFakeTerminal(this.refs.xterm);\n  }\n\n  componentWillUnmount() {\n    this.refs.mainDeviceComponent.componentWillUnmount();\n    console.log(this.refs.mainDeviceComponent);\n  }\n\n  sendToTerminal(text) {\n    this.refs.xterm && this.refs.xterm.writeln('Welcome to xterm!!@@##.js');\n  }\n\n  fitTerminal() {\n    this.refs.xterm && this.refs.xterm.fit();\n  }\n\n  throttleConsoleResize(size) {\n    this.fitTerminal();\n    console.log('resizing');\n  }\n\n  render() {\n    console.log(this.refs.mainDeviceComponent);\n    return React.createElement(XTerm, {\n      ref: \"xterm\",\n      style: {\n        addons: ['fit', 'fullscreen', 'search'],\n        overflow: 'hidden',\n        width: '100%',\n        height: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default XtermTerminal;\n\nfunction runFakeTerminal(xterm) {\n  const term = xterm.getTerminal();\n  var shellprompt = '$ ';\n\n  function prompt() {\n    xterm.write('\\r\\n' + shellprompt);\n  }\n\n  xterm.writeln('Welcome to xterm.js');\n  xterm.writeln('This is a local terminal emulation, without a real terminal in the back-end.');\n  xterm.writeln('Type some keys and commands to play around.');\n  xterm.writeln('');\n  prompt();\n  term.on('key', function (key, ev) {\n    var printable = !ev.altKey && !ev.ctrlKey && !ev.metaKey;\n\n    if (ev.keyCode === 13) {\n      prompt();\n      console.log('sending cmd to somewhere');\n      setTimeout(() => {\n        console.log('Recieved by server');\n      }, 200); // } else if (ev.keyCode == 8) {\n      //   // Do not delete the prompt\n      //   if (term['x'] > 2) {\n      //     xterm.write('\\b \\b')\n      //   }\n    } else if (printable) {\n      xterm.write(key);\n    }\n  });\n  term.on('paste', (data, ev) => {\n    xterm.write(data);\n  });\n}","map":{"version":3,"sources":["/Users/admin/Documents/projects/ols/xterm-test/src/components/XtermTerminal.js"],"names":["React","Component","XTerm","Terminal","XtermTerminal","componentDidMount","runFakeTerminal","refs","xterm","componentWillUnmount","mainDeviceComponent","console","log","sendToTerminal","text","writeln","fitTerminal","fit","throttleConsoleResize","size","render","addons","overflow","width","height","term","getTerminal","shellprompt","prompt","write","on","key","ev","printable","altKey","ctrlKey","metaKey","keyCode","setTimeout","data"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { XTerm, Terminal } from 'react-xterm'\n\nclass XtermTerminal extends Component {\n  componentDidMount() {\n    runFakeTerminal(this.refs.xterm)\n  }\n  componentWillUnmount() {\n    this.refs.mainDeviceComponent.componentWillUnmount()\n    console.log(this.refs.mainDeviceComponent);\n  }\n\n  sendToTerminal(text) {\n    this.refs.xterm && this.refs.xterm.writeln('Welcome to xterm!!@@##.js')\n  }\n\n  fitTerminal() {\n    this.refs.xterm && this.refs.xterm.fit()\n  }\n\n  throttleConsoleResize(size) {\n    this.fitTerminal()\n    console.log('resizing');\n  }\n\n  render() {\n  console.log(this.refs.mainDeviceComponent);\n    return (\n      <XTerm ref='xterm' style={{\n        addons: ['fit', 'fullscreen', 'search'],\n        overflow: 'hidden',\n        width: '100%',\n        height: '100%'\n      }} />\n    )\n  }\n}\n\nexport default XtermTerminal\n\nfunction runFakeTerminal(xterm: XTerm) {\n  const term: Terminal = xterm.getTerminal()\n  var shellprompt = '$ '\n\n  function prompt () {\n    xterm.write('\\r\\n' + shellprompt)\n  }\n  xterm.writeln('Welcome to xterm.js')\n  xterm.writeln('This is a local terminal emulation, without a real terminal in the back-end.')\n  xterm.writeln('Type some keys and commands to play around.')\n  xterm.writeln('')\n  prompt()\n\n  term.on('key', function (key, ev) {\n    var printable = (\n      !ev.altKey && !ev.ctrlKey && !ev.metaKey\n    )\n\n    if (ev.keyCode === 13) {\n      prompt()\n      console.log('sending cmd to somewhere');\n\n      setTimeout(() => {\n        console.log('Recieved by server');\n      }, 200)\n    // } else if (ev.keyCode == 8) {\n    //   // Do not delete the prompt\n    //   if (term['x'] > 2) {\n    //     xterm.write('\\b \\b')\n    //   }\n    } else if (printable) {\n      xterm.write(key)\n    }\n  })\n\n  term.on('paste', (data, ev) => {\n    xterm.write(data)\n  })\n}\n"]},"metadata":{},"sourceType":"module"}