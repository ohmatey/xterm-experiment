{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar CompositionHelper = function () {\n  function CompositionHelper(textarea, compositionView, terminal) {\n    this.textarea = textarea;\n    this.compositionView = compositionView;\n    this.terminal = terminal;\n    this.isComposing = false;\n    this.isSendingComposition = false;\n    this.compositionPosition = {\n      start: null,\n      end: null\n    };\n  }\n\n  CompositionHelper.prototype.compositionstart = function () {\n    this.isComposing = true;\n    this.compositionPosition.start = this.textarea.value.length;\n    this.compositionView.textContent = '';\n    this.compositionView.classList.add('active');\n  };\n\n  CompositionHelper.prototype.compositionupdate = function (ev) {\n    var _this = this;\n\n    this.compositionView.textContent = ev.data;\n    this.updateCompositionElements();\n    setTimeout(function () {\n      _this.compositionPosition.end = _this.textarea.value.length;\n    }, 0);\n  };\n\n  CompositionHelper.prototype.compositionend = function () {\n    this.finalizeComposition(true);\n  };\n\n  CompositionHelper.prototype.keydown = function (ev) {\n    if (this.isComposing || this.isSendingComposition) {\n      if (ev.keyCode === 229) {\n        return false;\n      } else if (ev.keyCode === 16 || ev.keyCode === 17 || ev.keyCode === 18) {\n        return false;\n      } else {\n        this.finalizeComposition(false);\n      }\n    }\n\n    if (ev.keyCode === 229) {\n      this.handleAnyTextareaChanges();\n      return false;\n    }\n\n    return true;\n  };\n\n  CompositionHelper.prototype.finalizeComposition = function (waitForPropogation) {\n    var _this = this;\n\n    this.compositionView.classList.remove('active');\n    this.isComposing = false;\n    this.clearTextareaPosition();\n\n    if (!waitForPropogation) {\n      this.isSendingComposition = false;\n      var input = this.textarea.value.substring(this.compositionPosition.start, this.compositionPosition.end);\n      this.terminal.handler(input);\n    } else {\n      var currentCompositionPosition_1 = {\n        start: this.compositionPosition.start,\n        end: this.compositionPosition.end\n      };\n      this.isSendingComposition = true;\n      setTimeout(function () {\n        if (_this.isSendingComposition) {\n          _this.isSendingComposition = false;\n          var input = void 0;\n\n          if (_this.isComposing) {\n            input = _this.textarea.value.substring(currentCompositionPosition_1.start, currentCompositionPosition_1.end);\n          } else {\n            input = _this.textarea.value.substring(currentCompositionPosition_1.start);\n          }\n\n          _this.terminal.handler(input);\n        }\n      }, 0);\n    }\n  };\n\n  CompositionHelper.prototype.handleAnyTextareaChanges = function () {\n    var _this = this;\n\n    var oldValue = this.textarea.value;\n    setTimeout(function () {\n      if (!_this.isComposing) {\n        var newValue = _this.textarea.value;\n        var diff = newValue.replace(oldValue, '');\n\n        if (diff.length > 0) {\n          _this.terminal.handler(diff);\n        }\n      }\n    }, 0);\n  };\n\n  CompositionHelper.prototype.updateCompositionElements = function (dontRecurse) {\n    var _this = this;\n\n    if (!this.isComposing) {\n      return;\n    }\n\n    if (this.terminal.buffer.isCursorInViewport) {\n      var cellHeight = Math.ceil(this.terminal.charMeasure.height * this.terminal.options.lineHeight);\n      var cursorTop = this.terminal.buffer.y * cellHeight;\n      var cursorLeft = this.terminal.buffer.x * this.terminal.charMeasure.width;\n      this.compositionView.style.left = cursorLeft + 'px';\n      this.compositionView.style.top = cursorTop + 'px';\n      this.compositionView.style.height = cellHeight + 'px';\n      this.compositionView.style.lineHeight = cellHeight + 'px';\n      var compositionViewBounds = this.compositionView.getBoundingClientRect();\n      this.textarea.style.left = cursorLeft + 'px';\n      this.textarea.style.top = cursorTop + 'px';\n      this.textarea.style.width = compositionViewBounds.width + 'px';\n      this.textarea.style.height = compositionViewBounds.height + 'px';\n      this.textarea.style.lineHeight = compositionViewBounds.height + 'px';\n    }\n\n    if (!dontRecurse) {\n      setTimeout(function () {\n        return _this.updateCompositionElements(true);\n      }, 0);\n    }\n  };\n\n  CompositionHelper.prototype.clearTextareaPosition = function () {\n    this.textarea.style.left = '';\n    this.textarea.style.top = '';\n  };\n\n  return CompositionHelper;\n}();\n\nexports.CompositionHelper = CompositionHelper;","map":null,"metadata":{},"sourceType":"script"}