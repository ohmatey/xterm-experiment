{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar EscapeSequences_1 = require(\"../EscapeSequences\");\n\nvar Direction;\n\n(function (Direction) {\n  Direction[\"Up\"] = \"A\";\n  Direction[\"Down\"] = \"B\";\n  Direction[\"Right\"] = \"C\";\n  Direction[\"Left\"] = \"D\";\n})(Direction || (Direction = {}));\n\nvar AltClickHandler = function () {\n  function AltClickHandler(_mouseEvent, _terminal) {\n    this._mouseEvent = _mouseEvent;\n    this._terminal = _terminal;\n    this._lines = this._terminal.buffer.lines;\n    this._startCol = this._terminal.buffer.x;\n    this._startRow = this._terminal.buffer.y;\n    _a = this._terminal.mouseHelper.getCoords(this._mouseEvent, this._terminal.element, this._terminal.charMeasure, this._terminal.options.lineHeight, this._terminal.cols, this._terminal.rows, false).map(function (coordinate) {\n      return coordinate - 1;\n    }), this._endCol = _a[0], this._endRow = _a[1];\n\n    var _a;\n  }\n\n  AltClickHandler.prototype.move = function () {\n    if (this._mouseEvent.altKey) {\n      this._terminal.send(this._arrowSequences());\n    }\n  };\n\n  AltClickHandler.prototype._arrowSequences = function () {\n    return this._resetStartingRow() + this._moveToRequestedRow() + this._moveToRequestedCol();\n  };\n\n  AltClickHandler.prototype._resetStartingRow = function () {\n    var startRow = this._endRow - this._wrappedRowsForRow(this._endRow);\n\n    var endRow = this._endRow;\n\n    if (this._moveToRequestedRow().length === 0) {\n      return '';\n    } else {\n      return repeat(this._bufferLine(this._startCol, this._startRow, this._startCol, this._startRow - this._wrappedRowsForRow(this._startRow), false).length, this._sequence(Direction.Left));\n    }\n  };\n\n  AltClickHandler.prototype._moveToRequestedRow = function () {\n    var startRow = this._startRow - this._wrappedRowsForRow(this._startRow);\n\n    var endRow = this._endRow - this._wrappedRowsForRow(this._endRow);\n\n    var rowsToMove = Math.abs(startRow - endRow) - this._wrappedRowsCount();\n\n    return repeat(rowsToMove, this._sequence(this._verticalDirection()));\n  };\n\n  AltClickHandler.prototype._moveToRequestedCol = function () {\n    var startRow;\n\n    if (this._moveToRequestedRow().length > 0) {\n      startRow = this._endRow - this._wrappedRowsForRow(this._endRow);\n    } else {\n      startRow = this._startRow;\n    }\n\n    var endRow = this._endRow;\n\n    var direction = this._horizontalDirection();\n\n    return repeat(this._bufferLine(this._startCol, startRow, this._endCol, endRow, direction === Direction.Right).length, this._sequence(direction));\n  };\n\n  AltClickHandler.prototype._wrappedRowsCount = function () {\n    var wrappedRows = 0;\n\n    var startRow = this._startRow - this._wrappedRowsForRow(this._startRow);\n\n    var endRow = this._endRow - this._wrappedRowsForRow(this._endRow);\n\n    for (var i = 0; i < Math.abs(startRow - endRow); i++) {\n      var direction = this._verticalDirection() === Direction.Up ? -1 : 1;\n\n      if (this._lines.get(startRow + direction * i).isWrapped) {\n        wrappedRows++;\n      }\n    }\n\n    return wrappedRows;\n  };\n\n  AltClickHandler.prototype._wrappedRowsForRow = function (currentRow) {\n    var rowCount = 0;\n\n    var lineWraps = this._lines.get(currentRow).isWrapped;\n\n    while (lineWraps && currentRow >= 0 && currentRow < this._terminal.rows) {\n      rowCount++;\n      currentRow--;\n      lineWraps = this._lines.get(currentRow).isWrapped;\n    }\n\n    return rowCount;\n  };\n\n  AltClickHandler.prototype._horizontalDirection = function () {\n    var startRow;\n\n    if (this._moveToRequestedRow().length > 0) {\n      startRow = this._endRow - this._wrappedRowsForRow(this._endRow);\n    } else {\n      startRow = this._startRow;\n    }\n\n    if (this._startCol < this._endCol && startRow <= this._endRow || this._startCol >= this._endCol && startRow < this._endRow) {\n      return Direction.Right;\n    } else {\n      return Direction.Left;\n    }\n  };\n\n  AltClickHandler.prototype._verticalDirection = function () {\n    if (this._startRow > this._endRow) {\n      return Direction.Up;\n    } else {\n      return Direction.Down;\n    }\n  };\n\n  AltClickHandler.prototype._bufferLine = function (startCol, startRow, endCol, endRow, forward) {\n    var currentCol = startCol;\n    var currentRow = startRow;\n    var bufferStr = '';\n\n    while (currentCol !== endCol || currentRow !== endRow) {\n      currentCol += forward ? 1 : -1;\n\n      if (forward && currentCol > this._terminal.cols - 1) {\n        bufferStr += this._terminal.buffer.translateBufferLineToString(currentRow, false, startCol, currentCol);\n        currentCol = 0;\n        startCol = 0;\n        currentRow++;\n      } else if (!forward && currentCol < 0) {\n        bufferStr += this._terminal.buffer.translateBufferLineToString(currentRow, false, 0, startCol + 1);\n        currentCol = this._terminal.cols - 1;\n        startCol = currentCol;\n        currentRow--;\n      }\n    }\n\n    return bufferStr + this._terminal.buffer.translateBufferLineToString(currentRow, false, startCol, currentCol);\n  };\n\n  AltClickHandler.prototype._sequence = function (direction) {\n    var mod = this._terminal.applicationCursor ? 'O' : '[';\n    return EscapeSequences_1.C0.ESC + mod + direction;\n  };\n\n  return AltClickHandler;\n}();\n\nexports.AltClickHandler = AltClickHandler;\n\nfunction repeat(count, str) {\n  count = Math.floor(count);\n  var rpt = '';\n\n  for (var i = 0; i < count; i++) {\n    rpt += str;\n  }\n\n  return rpt;\n}","map":null,"metadata":{},"sourceType":"script"}