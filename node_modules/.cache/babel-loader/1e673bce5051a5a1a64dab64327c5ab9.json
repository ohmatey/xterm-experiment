{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar MouseHelper_1 = require(\"./utils/MouseHelper\");\n\nvar Browser = require(\"./shared/utils/Browser\");\n\nvar EventEmitter_1 = require(\"./EventEmitter\");\n\nvar SelectionModel_1 = require(\"./SelectionModel\");\n\nvar Buffer_1 = require(\"./Buffer\");\n\nvar AltClickHandler_1 = require(\"./handlers/AltClickHandler\");\n\nvar DRAG_SCROLL_MAX_THRESHOLD = 50;\nvar DRAG_SCROLL_MAX_SPEED = 15;\nvar DRAG_SCROLL_INTERVAL = 50;\nvar ALT_CLICK_MOVE_CURSOR_TIME = 500;\nvar WORD_SEPARATORS = ' ()[]{}\\'\"';\nvar NON_BREAKING_SPACE_CHAR = String.fromCharCode(160);\nvar ALL_NON_BREAKING_SPACE_REGEX = new RegExp(NON_BREAKING_SPACE_CHAR, 'g');\nvar SelectionMode;\n\n(function (SelectionMode) {\n  SelectionMode[SelectionMode[\"NORMAL\"] = 0] = \"NORMAL\";\n  SelectionMode[SelectionMode[\"WORD\"] = 1] = \"WORD\";\n  SelectionMode[SelectionMode[\"LINE\"] = 2] = \"LINE\";\n})(SelectionMode || (SelectionMode = {}));\n\nvar SelectionManager = function (_super) {\n  __extends(SelectionManager, _super);\n\n  function SelectionManager(_terminal, _charMeasure) {\n    var _this = _super.call(this) || this;\n\n    _this._terminal = _terminal;\n    _this._charMeasure = _charMeasure;\n    _this._enabled = true;\n\n    _this._initListeners();\n\n    _this.enable();\n\n    _this._model = new SelectionModel_1.SelectionModel(_terminal);\n    _this._activeSelectionMode = SelectionMode.NORMAL;\n    return _this;\n  }\n\n  Object.defineProperty(SelectionManager.prototype, \"_buffer\", {\n    get: function () {\n      return this._terminal.buffers.active;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  SelectionManager.prototype._initListeners = function () {\n    var _this = this;\n\n    this._mouseMoveListener = function (event) {\n      return _this._onMouseMove(event);\n    };\n\n    this._mouseUpListener = function (event) {\n      return _this._onMouseUp(event);\n    };\n\n    this._trimListener = function (amount) {\n      return _this._onTrim(amount);\n    };\n\n    this.initBuffersListeners();\n  };\n\n  SelectionManager.prototype.initBuffersListeners = function () {\n    var _this = this;\n\n    this._terminal.buffer.lines.on('trim', this._trimListener);\n\n    this._terminal.buffers.on('activate', function (e) {\n      return _this._onBufferActivate(e);\n    });\n  };\n\n  SelectionManager.prototype.disable = function () {\n    this.clearSelection();\n    this._enabled = false;\n  };\n\n  SelectionManager.prototype.enable = function () {\n    this._enabled = true;\n  };\n\n  Object.defineProperty(SelectionManager.prototype, \"selectionStart\", {\n    get: function () {\n      return this._model.finalSelectionStart;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionManager.prototype, \"selectionEnd\", {\n    get: function () {\n      return this._model.finalSelectionEnd;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionManager.prototype, \"hasSelection\", {\n    get: function () {\n      var start = this._model.finalSelectionStart;\n      var end = this._model.finalSelectionEnd;\n\n      if (!start || !end) {\n        return false;\n      }\n\n      return start[0] !== end[0] || start[1] !== end[1];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SelectionManager.prototype, \"selectionText\", {\n    get: function () {\n      var start = this._model.finalSelectionStart;\n      var end = this._model.finalSelectionEnd;\n\n      if (!start || !end) {\n        return '';\n      }\n\n      var startRowEndCol = start[1] === end[1] ? end[0] : null;\n      var result = [];\n      result.push(this._buffer.translateBufferLineToString(start[1], true, start[0], startRowEndCol));\n\n      for (var i = start[1] + 1; i <= end[1] - 1; i++) {\n        var bufferLine = this._buffer.lines.get(i);\n\n        var lineText = this._buffer.translateBufferLineToString(i, true);\n\n        if (bufferLine.isWrapped) {\n          result[result.length - 1] += lineText;\n        } else {\n          result.push(lineText);\n        }\n      }\n\n      if (start[1] !== end[1]) {\n        var bufferLine = this._buffer.lines.get(end[1]);\n\n        var lineText = this._buffer.translateBufferLineToString(end[1], true, 0, end[0]);\n\n        if (bufferLine.isWrapped) {\n          result[result.length - 1] += lineText;\n        } else {\n          result.push(lineText);\n        }\n      }\n\n      var formattedResult = result.map(function (line) {\n        return line.replace(ALL_NON_BREAKING_SPACE_REGEX, ' ');\n      }).join(Browser.isMSWindows ? '\\r\\n' : '\\n');\n      return formattedResult;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  SelectionManager.prototype.clearSelection = function () {\n    this._model.clearSelection();\n\n    this._removeMouseDownListeners();\n\n    this.refresh();\n  };\n\n  SelectionManager.prototype.refresh = function (isNewSelection) {\n    var _this = this;\n\n    if (!this._refreshAnimationFrame) {\n      this._refreshAnimationFrame = window.requestAnimationFrame(function () {\n        return _this._refresh();\n      });\n    }\n\n    if (Browser.isLinux && isNewSelection) {\n      var selectionText = this.selectionText;\n\n      if (selectionText.length) {\n        this.emit('newselection', this.selectionText);\n      }\n    }\n  };\n\n  SelectionManager.prototype._refresh = function () {\n    this._refreshAnimationFrame = null;\n    this.emit('refresh', {\n      start: this._model.finalSelectionStart,\n      end: this._model.finalSelectionEnd\n    });\n  };\n\n  SelectionManager.prototype.isClickInSelection = function (event) {\n    var coords = this._getMouseBufferCoords(event);\n\n    var start = this._model.finalSelectionStart;\n    var end = this._model.finalSelectionEnd;\n\n    if (!start || !end) {\n      return false;\n    }\n\n    return coords[1] > start[1] && coords[1] < end[1] || start[1] === end[1] && coords[1] === start[1] && coords[0] > start[0] && coords[0] < end[0] || start[1] < end[1] && coords[1] === end[1] && coords[0] < end[0];\n  };\n\n  SelectionManager.prototype.selectWordAtCursor = function (event) {\n    var coords = this._getMouseBufferCoords(event);\n\n    if (coords) {\n      this._selectWordAt(coords, false);\n\n      this._model.selectionEnd = null;\n      this.refresh(true);\n    }\n  };\n\n  SelectionManager.prototype.selectAll = function () {\n    this._model.isSelectAllActive = true;\n    this.refresh();\n\n    this._terminal.emit('selection');\n  };\n\n  SelectionManager.prototype._onTrim = function (amount) {\n    var needsRefresh = this._model.onTrim(amount);\n\n    if (needsRefresh) {\n      this.refresh();\n    }\n  };\n\n  SelectionManager.prototype._getMouseBufferCoords = function (event) {\n    var coords = this._terminal.mouseHelper.getCoords(event, this._terminal.screenElement, this._charMeasure, this._terminal.options.lineHeight, this._terminal.cols, this._terminal.rows, true);\n\n    if (!coords) {\n      return null;\n    }\n\n    coords[0]--;\n    coords[1]--;\n    coords[1] += this._terminal.buffer.ydisp;\n    return coords;\n  };\n\n  SelectionManager.prototype._getMouseEventScrollAmount = function (event) {\n    var offset = MouseHelper_1.MouseHelper.getCoordsRelativeToElement(event, this._terminal.screenElement)[1];\n    var terminalHeight = this._terminal.rows * Math.ceil(this._charMeasure.height * this._terminal.options.lineHeight);\n\n    if (offset >= 0 && offset <= terminalHeight) {\n      return 0;\n    }\n\n    if (offset > terminalHeight) {\n      offset -= terminalHeight;\n    }\n\n    offset = Math.min(Math.max(offset, -DRAG_SCROLL_MAX_THRESHOLD), DRAG_SCROLL_MAX_THRESHOLD);\n    offset /= DRAG_SCROLL_MAX_THRESHOLD;\n    return offset / Math.abs(offset) + Math.round(offset * (DRAG_SCROLL_MAX_SPEED - 1));\n  };\n\n  SelectionManager.prototype.shouldForceSelection = function (event) {\n    return Browser.isMac ? event.altKey : event.shiftKey;\n  };\n\n  SelectionManager.prototype.onMouseDown = function (event) {\n    this._mouseDownTimeStamp = event.timeStamp;\n\n    if (event.button === 2 && this.hasSelection) {\n      return;\n    }\n\n    if (event.button !== 0) {\n      return;\n    }\n\n    if (!this._enabled) {\n      if (!this.shouldForceSelection(event)) {\n        return;\n      }\n\n      event.stopPropagation();\n    }\n\n    event.preventDefault();\n    this._dragScrollAmount = 0;\n\n    if (this._enabled && event.shiftKey) {\n      this._onIncrementalClick(event);\n    } else {\n      if (event.detail === 1) {\n        this._onSingleClick(event);\n      } else if (event.detail === 2) {\n        this._onDoubleClick(event);\n      } else if (event.detail === 3) {\n        this._onTripleClick(event);\n      }\n    }\n\n    this._addMouseDownListeners();\n\n    this.refresh(true);\n  };\n\n  SelectionManager.prototype._addMouseDownListeners = function () {\n    var _this = this;\n\n    this._terminal.element.ownerDocument.addEventListener('mousemove', this._mouseMoveListener);\n\n    this._terminal.element.ownerDocument.addEventListener('mouseup', this._mouseUpListener);\n\n    this._dragScrollIntervalTimer = setInterval(function () {\n      return _this._dragScroll();\n    }, DRAG_SCROLL_INTERVAL);\n  };\n\n  SelectionManager.prototype._removeMouseDownListeners = function () {\n    this._terminal.element.ownerDocument.removeEventListener('mousemove', this._mouseMoveListener);\n\n    this._terminal.element.ownerDocument.removeEventListener('mouseup', this._mouseUpListener);\n\n    clearInterval(this._dragScrollIntervalTimer);\n    this._dragScrollIntervalTimer = null;\n  };\n\n  SelectionManager.prototype._onIncrementalClick = function (event) {\n    if (this._model.selectionStart) {\n      this._model.selectionEnd = this._getMouseBufferCoords(event);\n    }\n  };\n\n  SelectionManager.prototype._onSingleClick = function (event) {\n    this._model.selectionStartLength = 0;\n    this._model.isSelectAllActive = false;\n    this._activeSelectionMode = SelectionMode.NORMAL;\n    this._model.selectionStart = this._getMouseBufferCoords(event);\n\n    if (!this._model.selectionStart) {\n      return;\n    }\n\n    this._model.selectionEnd = null;\n\n    var line = this._buffer.lines.get(this._model.selectionStart[1]);\n\n    if (!line) {\n      return;\n    }\n\n    if (line.length >= this._model.selectionStart[0]) {\n      return;\n    }\n\n    var char = line[this._model.selectionStart[0]];\n\n    if (char[Buffer_1.CHAR_DATA_WIDTH_INDEX] === 0) {\n      this._model.selectionStart[0]++;\n    }\n  };\n\n  SelectionManager.prototype._onDoubleClick = function (event) {\n    var coords = this._getMouseBufferCoords(event);\n\n    if (coords) {\n      this._activeSelectionMode = SelectionMode.WORD;\n\n      this._selectWordAt(coords, true);\n    }\n  };\n\n  SelectionManager.prototype._onTripleClick = function (event) {\n    var coords = this._getMouseBufferCoords(event);\n\n    if (coords) {\n      this._activeSelectionMode = SelectionMode.LINE;\n\n      this._selectLineAt(coords[1]);\n    }\n  };\n\n  SelectionManager.prototype._onMouseMove = function (event) {\n    event.stopImmediatePropagation();\n    var previousSelectionEnd = this._model.selectionEnd ? [this._model.selectionEnd[0], this._model.selectionEnd[1]] : null;\n    this._model.selectionEnd = this._getMouseBufferCoords(event);\n\n    if (!this._model.selectionEnd) {\n      this.refresh(true);\n      return;\n    }\n\n    if (this._activeSelectionMode === SelectionMode.LINE) {\n      if (this._model.selectionEnd[1] < this._model.selectionStart[1]) {\n        this._model.selectionEnd[0] = 0;\n      } else {\n        this._model.selectionEnd[0] = this._terminal.cols;\n      }\n    } else if (this._activeSelectionMode === SelectionMode.WORD) {\n      this._selectToWordAt(this._model.selectionEnd);\n    }\n\n    this._dragScrollAmount = this._getMouseEventScrollAmount(event);\n\n    if (this._dragScrollAmount > 0) {\n      this._model.selectionEnd[0] = this._terminal.cols;\n    } else if (this._dragScrollAmount < 0) {\n      this._model.selectionEnd[0] = 0;\n    }\n\n    if (this._model.selectionEnd[1] < this._buffer.lines.length) {\n      var char = this._buffer.lines.get(this._model.selectionEnd[1])[this._model.selectionEnd[0]];\n\n      if (char && char[Buffer_1.CHAR_DATA_WIDTH_INDEX] === 0) {\n        this._model.selectionEnd[0]++;\n      }\n    }\n\n    if (!previousSelectionEnd || previousSelectionEnd[0] !== this._model.selectionEnd[0] || previousSelectionEnd[1] !== this._model.selectionEnd[1]) {\n      this.refresh(true);\n    }\n  };\n\n  SelectionManager.prototype._dragScroll = function () {\n    if (this._dragScrollAmount) {\n      this._terminal.scrollLines(this._dragScrollAmount, false);\n\n      if (this._dragScrollAmount > 0) {\n        this._model.selectionEnd = [this._terminal.cols - 1, Math.min(this._terminal.buffer.ydisp + this._terminal.rows, this._terminal.buffer.lines.length - 1)];\n      } else {\n        this._model.selectionEnd = [0, this._terminal.buffer.ydisp];\n      }\n\n      this.refresh();\n    }\n  };\n\n  SelectionManager.prototype._onMouseUp = function (event) {\n    var timeElapsed = event.timeStamp - this._mouseDownTimeStamp;\n\n    this._removeMouseDownListeners();\n\n    if (this.selectionText.length <= 1 && timeElapsed < ALT_CLICK_MOVE_CURSOR_TIME) {\n      new AltClickHandler_1.AltClickHandler(event, this._terminal).move();\n    } else if (this.hasSelection) {\n      this._terminal.emit('selection');\n    }\n  };\n\n  SelectionManager.prototype._onBufferActivate = function (e) {\n    this.clearSelection();\n    e.inactiveBuffer.lines.off('trim', this._trimListener);\n    e.activeBuffer.lines.on('trim', this._trimListener);\n  };\n\n  SelectionManager.prototype._convertViewportColToCharacterIndex = function (bufferLine, coords) {\n    var charIndex = coords[0];\n\n    for (var i = 0; coords[0] >= i; i++) {\n      var char = bufferLine[i];\n\n      if (char[Buffer_1.CHAR_DATA_WIDTH_INDEX] === 0) {\n        charIndex--;\n      } else if (char[Buffer_1.CHAR_DATA_CHAR_INDEX].length > 1 && coords[0] !== i) {\n        charIndex += char[Buffer_1.CHAR_DATA_CHAR_INDEX].length - 1;\n      }\n    }\n\n    return charIndex;\n  };\n\n  SelectionManager.prototype.setSelection = function (col, row, length) {\n    this._model.clearSelection();\n\n    this._removeMouseDownListeners();\n\n    this._model.selectionStart = [col, row];\n    this._model.selectionStartLength = length;\n    this.refresh();\n  };\n\n  SelectionManager.prototype._getWordAt = function (coords, allowWhitespaceOnlySelection) {\n    var bufferLine = this._buffer.lines.get(coords[1]);\n\n    if (!bufferLine) {\n      return null;\n    }\n\n    var line = this._buffer.translateBufferLineToString(coords[1], false);\n\n    var startIndex = this._convertViewportColToCharacterIndex(bufferLine, coords);\n\n    var endIndex = startIndex;\n    var charOffset = coords[0] - startIndex;\n    var leftWideCharCount = 0;\n    var rightWideCharCount = 0;\n    var leftLongCharOffset = 0;\n    var rightLongCharOffset = 0;\n\n    if (line.charAt(startIndex) === ' ') {\n      while (startIndex > 0 && line.charAt(startIndex - 1) === ' ') {\n        startIndex--;\n      }\n\n      while (endIndex < line.length && line.charAt(endIndex + 1) === ' ') {\n        endIndex++;\n      }\n    } else {\n      var startCol = coords[0];\n      var endCol = coords[0];\n\n      if (bufferLine[startCol][Buffer_1.CHAR_DATA_WIDTH_INDEX] === 0) {\n        leftWideCharCount++;\n        startCol--;\n      }\n\n      if (bufferLine[endCol][Buffer_1.CHAR_DATA_WIDTH_INDEX] === 2) {\n        rightWideCharCount++;\n        endCol++;\n      }\n\n      if (bufferLine[endCol][Buffer_1.CHAR_DATA_CHAR_INDEX].length > 1) {\n        rightLongCharOffset += bufferLine[endCol][Buffer_1.CHAR_DATA_CHAR_INDEX].length - 1;\n        endIndex += bufferLine[endCol][Buffer_1.CHAR_DATA_CHAR_INDEX].length - 1;\n      }\n\n      while (startCol > 0 && startIndex > 0 && !this._isCharWordSeparator(bufferLine[startCol - 1])) {\n        var char = bufferLine[startCol - 1];\n\n        if (char[Buffer_1.CHAR_DATA_WIDTH_INDEX] === 0) {\n          leftWideCharCount++;\n          startCol--;\n        } else if (char[Buffer_1.CHAR_DATA_CHAR_INDEX].length > 1) {\n          leftLongCharOffset += char[Buffer_1.CHAR_DATA_CHAR_INDEX].length - 1;\n          startIndex -= char[Buffer_1.CHAR_DATA_CHAR_INDEX].length - 1;\n        }\n\n        startIndex--;\n        startCol--;\n      }\n\n      while (endCol < bufferLine.length && endIndex + 1 < line.length && !this._isCharWordSeparator(bufferLine[endCol + 1])) {\n        var char = bufferLine[endCol + 1];\n\n        if (char[Buffer_1.CHAR_DATA_WIDTH_INDEX] === 2) {\n          rightWideCharCount++;\n          endCol++;\n        } else if (char[Buffer_1.CHAR_DATA_CHAR_INDEX].length > 1) {\n          rightLongCharOffset += char[Buffer_1.CHAR_DATA_CHAR_INDEX].length - 1;\n          endIndex += char[Buffer_1.CHAR_DATA_CHAR_INDEX].length - 1;\n        }\n\n        endIndex++;\n        endCol++;\n      }\n    }\n\n    endIndex++;\n    var start = startIndex + charOffset - leftWideCharCount + leftLongCharOffset;\n    var length = Math.min(this._terminal.cols, endIndex - startIndex + leftWideCharCount + rightWideCharCount - leftLongCharOffset - rightLongCharOffset);\n\n    if (!allowWhitespaceOnlySelection && line.slice(startIndex, endIndex).trim() === '') {\n      return null;\n    }\n\n    return {\n      start: start,\n      length: length\n    };\n  };\n\n  SelectionManager.prototype._selectWordAt = function (coords, allowWhitespaceOnlySelection) {\n    var wordPosition = this._getWordAt(coords, allowWhitespaceOnlySelection);\n\n    if (wordPosition) {\n      this._model.selectionStart = [wordPosition.start, coords[1]];\n      this._model.selectionStartLength = wordPosition.length;\n    }\n  };\n\n  SelectionManager.prototype._selectToWordAt = function (coords) {\n    var wordPosition = this._getWordAt(coords, true);\n\n    if (wordPosition) {\n      this._model.selectionEnd = [this._model.areSelectionValuesReversed() ? wordPosition.start : wordPosition.start + wordPosition.length, coords[1]];\n    }\n  };\n\n  SelectionManager.prototype._isCharWordSeparator = function (charData) {\n    if (charData[Buffer_1.CHAR_DATA_WIDTH_INDEX] === 0) {\n      return false;\n    }\n\n    return WORD_SEPARATORS.indexOf(charData[Buffer_1.CHAR_DATA_CHAR_INDEX]) >= 0;\n  };\n\n  SelectionManager.prototype._selectLineAt = function (line) {\n    this._model.selectionStart = [0, line];\n    this._model.selectionStartLength = this._terminal.cols;\n  };\n\n  return SelectionManager;\n}(EventEmitter_1.EventEmitter);\n\nexports.SelectionManager = SelectionManager;","map":null,"metadata":{},"sourceType":"script"}