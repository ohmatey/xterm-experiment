{"ast":null,"code":"\"use strict\";\n\nvar term, protocol, socketURL, socket, pid;\nvar terminalContainer = document.getElementById('terminal-container'),\n    actionElements = {\n  findNext: document.querySelector('#find-next'),\n  findPrevious: document.querySelector('#find-previous')\n},\n    optionElements = {\n  cursorBlink: document.querySelector('#option-cursor-blink'),\n  cursorStyle: document.querySelector('#option-cursor-style'),\n  scrollback: document.querySelector('#option-scrollback'),\n  tabstopwidth: document.querySelector('#option-tabstopwidth'),\n  bellStyle: document.querySelector('#option-bell-style')\n},\n    colsElement = document.getElementById('cols'),\n    rowsElement = document.getElementById('rows');\n\nfunction setTerminalSize() {\n  var cols = parseInt(colsElement.value, 10);\n  var rows = parseInt(rowsElement.value, 10);\n  var viewportElement = document.querySelector('.xterm-viewport');\n  var scrollBarWidth = viewportElement.offsetWidth - viewportElement.clientWidth;\n  var width = (cols * term.charMeasure.width + 20\n  /*room for scrollbar*/\n  ).toString() + 'px';\n  var height = (rows * term.charMeasure.height).toString() + 'px';\n  terminalContainer.style.width = width;\n  terminalContainer.style.height = height;\n  term.resize(cols, rows);\n}\n\ncolsElement.addEventListener('change', setTerminalSize);\nrowsElement.addEventListener('change', setTerminalSize);\nactionElements.findNext.addEventListener('keypress', function (e) {\n  if (e.key === \"Enter\") {\n    e.preventDefault();\n    term.findNext(actionElements.findNext.value);\n  }\n});\nactionElements.findPrevious.addEventListener('keypress', function (e) {\n  if (e.key === \"Enter\") {\n    e.preventDefault();\n    term.findPrevious(actionElements.findPrevious.value);\n  }\n});\noptionElements.cursorBlink.addEventListener('change', function () {\n  term.setOption('cursorBlink', optionElements.cursorBlink.checked);\n});\noptionElements.cursorStyle.addEventListener('change', function () {\n  term.setOption('cursorStyle', optionElements.cursorStyle.value);\n});\noptionElements.bellStyle.addEventListener('change', function () {\n  term.setOption('bellStyle', optionElements.bellStyle.value);\n});\noptionElements.scrollback.addEventListener('change', function () {\n  term.setOption('scrollback', parseInt(optionElements.scrollback.value, 10));\n});\noptionElements.tabstopwidth.addEventListener('change', function () {\n  term.setOption('tabStopWidth', parseInt(optionElements.tabstopwidth.value, 10));\n});\ncreateTerminal();\n\nfunction createTerminal() {\n  // Clean terminal\n  while (terminalContainer.children.length) {\n    terminalContainer.removeChild(terminalContainer.children[0]);\n  }\n\n  term = new Terminal({\n    cursorBlink: optionElements.cursorBlink.checked,\n    scrollback: parseInt(optionElements.scrollback.value, 10),\n    tabStopWidth: parseInt(optionElements.tabstopwidth.value, 10)\n  });\n  term.on('resize', function (size) {\n    if (!pid) {\n      return;\n    }\n\n    var cols = size.cols,\n        rows = size.rows,\n        url = '/terminals/' + pid + '/size?cols=' + cols + '&rows=' + rows;\n    fetch(url, {\n      method: 'POST'\n    });\n  });\n  protocol = location.protocol === 'https:' ? 'wss://' : 'ws://';\n  socketURL = protocol + location.hostname + (location.port ? ':' + location.port : '') + '/terminals/';\n  term.open(terminalContainer);\n  term.fit(); // fit is called within a setTimeout, cols and rows need this.\n\n  setTimeout(function () {\n    colsElement.value = term.cols;\n    rowsElement.value = term.rows; // Set terminal size again to set the specific dimensions on the demo\n\n    setTerminalSize();\n    fetch('/terminals?cols=' + term.cols + '&rows=' + term.rows, {\n      method: 'POST'\n    }).then(function (res) {\n      res.text().then(function (pid) {\n        window.pid = pid;\n        socketURL += pid;\n        socket = new WebSocket(socketURL);\n        socket.onopen = runRealTerminal;\n        socket.onclose = runFakeTerminal;\n        socket.onerror = runFakeTerminal;\n        term.zmodemAttach(socket, {\n          noTerminalWriteOutsideSession: true\n        });\n        term.on(\"zmodemRetract\", () => {\n          start_form.style.display = \"none\";\n          start_form.onsubmit = null;\n        });\n        term.on(\"zmodemDetect\", detection => {\n          function do_zmodem() {\n            term.detach();\n            let zsession = detection.confirm();\n            var promise;\n\n            if (zsession.type === \"receive\") {\n              promise = _handle_receive_session(zsession);\n            } else {\n              promise = _handle_send_session(zsession);\n            }\n\n            promise.catch(console.error.bind(console)).then(() => {\n              term.attach(socket);\n            });\n          }\n\n          if (_auto_zmodem()) {\n            do_zmodem();\n          } else {\n            start_form.style.display = \"\";\n\n            start_form.onsubmit = function (e) {\n              start_form.style.display = \"none\";\n\n              if (document.getElementById(\"zmstart_yes\").checked) {\n                do_zmodem();\n              } else {\n                detection.deny();\n              }\n            };\n          }\n        });\n      });\n    });\n  }, 0);\n} //----------------------------------------------------------------------\n// UI STUFF\n\n\nfunction _show_file_info(xfer) {\n  var file_info = xfer.get_details();\n  document.getElementById(\"name\").textContent = file_info.name;\n  document.getElementById(\"size\").textContent = file_info.size;\n  document.getElementById(\"mtime\").textContent = file_info.mtime;\n  document.getElementById(\"files_remaining\").textContent = file_info.files_remaining;\n  document.getElementById(\"bytes_remaining\").textContent = file_info.bytes_remaining;\n  document.getElementById(\"mode\").textContent = \"0\" + file_info.mode.toString(8);\n  var xfer_opts = xfer.get_options();\n  [\"conversion\", \"management\", \"transport\", \"sparse\"].forEach(lbl => {\n    document.getElementById(\"zfile_\".concat(lbl)).textContent = xfer_opts[lbl];\n  });\n  document.getElementById(\"zm_file\").style.display = \"\";\n}\n\nfunction _hide_file_info() {\n  document.getElementById(\"zm_file\").style.display = \"none\";\n}\n\nfunction _save_to_disk(xfer, buffer) {\n  return Zmodem.Browser.save_to_disk(buffer, xfer.get_details().name);\n}\n\nvar skipper_button = document.getElementById(\"zm_progress_skipper\");\nvar skipper_button_orig_text = skipper_button.textContent;\n\nfunction _show_progress() {\n  skipper_button.disabled = false;\n  skipper_button.textContent = skipper_button_orig_text;\n  document.getElementById(\"bytes_received\").textContent = 0;\n  document.getElementById(\"percent_received\").textContent = 0;\n  document.getElementById(\"zm_progress\").style.display = \"\";\n}\n\nfunction _update_progress(xfer) {\n  var total_in = xfer.get_offset();\n  document.getElementById(\"bytes_received\").textContent = total_in;\n  var percent_received = 100 * total_in / xfer.get_details().size;\n  document.getElementById(\"percent_received\").textContent = percent_received.toFixed(2);\n}\n\nfunction _hide_progress() {\n  document.getElementById(\"zm_progress\").style.display = \"none\";\n}\n\nvar start_form = document.getElementById(\"zm_start\");\n\nfunction _auto_zmodem() {\n  return document.getElementById(\"zmodem-auto\").checked;\n} // END UI STUFF\n//----------------------------------------------------------------------\n\n\nfunction _handle_receive_session(zsession) {\n  zsession.on(\"offer\", function (xfer) {\n    current_receive_xfer = xfer;\n\n    _show_file_info(xfer);\n\n    var offer_form = document.getElementById(\"zm_offer\");\n\n    function on_form_submit() {\n      offer_form.style.display = \"none\"; //START\n      //if (offer_form.zmaccept.value) {\n\n      if (_auto_zmodem() || document.getElementById(\"zmaccept_yes\").checked) {\n        _show_progress();\n\n        var FILE_BUFFER = [];\n        xfer.on(\"input\", payload => {\n          _update_progress(xfer);\n\n          FILE_BUFFER.push(new Uint8Array(payload));\n        });\n        xfer.accept().then(() => {\n          _save_to_disk(xfer, FILE_BUFFER);\n        }, console.error.bind(console));\n      } else {\n        xfer.skip();\n      } //END\n\n    }\n\n    if (_auto_zmodem()) {\n      on_form_submit();\n    } else {\n      offer_form.onsubmit = on_form_submit;\n      offer_form.style.display = \"\";\n    }\n  });\n  var promise = new Promise(res => {\n    zsession.on(\"session_end\", () => {\n      _hide_file_info();\n\n      _hide_progress();\n\n      res();\n    });\n  });\n  zsession.start();\n  return promise;\n}\n\nfunction _handle_send_session(zsession) {\n  var choose_form = document.getElementById(\"zm_choose\");\n  choose_form.style.display = \"\";\n  var file_el = document.getElementById(\"zm_files\");\n  var promise = new Promise(res => {\n    file_el.onchange = function (e) {\n      choose_form.style.display = \"none\";\n      var files_obj = file_el.files;\n      Zmodem.Browser.send_files(zsession, files_obj, {\n        on_offer_response(obj, xfer) {\n          if (xfer) _show_progress(); //console.log(\"offer\", xfer ? \"accepted\" : \"skipped\");\n        },\n\n        on_progress(obj, xfer) {\n          _update_progress(xfer);\n        },\n\n        on_file_complete(obj) {\n          //console.log(\"COMPLETE\", obj);\n          _hide_progress();\n        }\n\n      }).then(_hide_progress).then(zsession.close.bind(zsession), console.error.bind(console)).then(() => {\n        _hide_file_info();\n\n        _hide_progress();\n\n        res();\n      });\n    };\n  });\n  return promise;\n} //This is here to allow canceling of an in-progress ZMODEM transfer.\n\n\nvar current_receive_xfer; //Called from HTML directly.\n\nfunction skip_current_file() {\n  current_receive_xfer.skip();\n  skipper_button.disabled = true;\n  skipper_button.textContent = \"Waiting for server to acknowledge skip …\";\n}\n\nfunction runRealTerminal() {\n  term.attach(socket);\n  term._initialized = true;\n}\n\nfunction runFakeTerminal() {\n  if (term._initialized) {\n    return;\n  }\n\n  term._initialized = true;\n  var shellprompt = '$ ';\n\n  term.prompt = function () {\n    term.write('\\r\\n' + shellprompt);\n  };\n\n  term.writeln('Welcome to xterm.js');\n  term.writeln('This is a local terminal emulation, without a real terminal in the back-end.');\n  term.writeln('Type some keys and commands to play around.');\n  term.writeln('');\n  term.prompt();\n  term.on('key', function (key, ev) {\n    var printable = !ev.altKey && !ev.altGraphKey && !ev.ctrlKey && !ev.metaKey;\n\n    if (ev.keyCode == 13) {\n      term.prompt();\n    } else if (ev.keyCode == 8) {\n      // Do not delete the prompt\n      if (term.x > 2) {\n        term.write('\\b \\b');\n      }\n    } else if (printable) {\n      term.write(key);\n    }\n  });\n  term.on('paste', function (data, ev) {\n    term.write(data);\n  });\n}","map":null,"metadata":{},"sourceType":"script"}