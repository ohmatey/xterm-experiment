{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/projects/ols/xterm-test/src/components/XtermTerminal.js\";\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport { XTerm, Terminal } from 'react-xterm';\n\nclass XtermTerminal extends Component {\n  constructor(props, context) {\n    super(props, context);\n  }\n\n  componentDidMount() {\n    runFakeTerminal(this.refs.xterm);\n  }\n\n  componentWillUnmount() {\n    this.refs.mainDeviceComponent.componentWillUnmount();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, React.createElement(XTerm, {\n      ref: \"xterm\",\n      style: {\n        addons: ['fit', 'fullscreen', 'search'],\n        overflow: 'hidden',\n        position: 'relative',\n        width: '100%',\n        height: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default XtermTerminal;\n\nfunction runFakeTerminal(xterm) {\n  const term = xterm.getTerminal();\n  var shellprompt = '$ ';\n\n  function prompt() {\n    xterm.write('\\r\\n' + shellprompt);\n  }\n\n  xterm.writeln('Welcome to xterm.js');\n  xterm.writeln('This is a local terminal emulation, without a real terminal in the back-end.');\n  xterm.writeln('Type some keys and commands to play around.');\n  xterm.writeln('');\n  prompt();\n  term.on('key', function (key, ev) {\n    var printable = !ev.altKey && !ev.ctrlKey && !ev.metaKey;\n\n    if (ev.keyCode == 13) {\n      prompt(); // } else if (ev.keyCode == 8) {\n      //   // Do not delete the prompt\n      //   if (term['x'] > 2) {\n      //     xterm.write('\\b \\b')\n      //   }\n    } else if (printable) {\n      xterm.write(key);\n    }\n  });\n  term.on('paste', function (data, ev) {\n    xterm.write(data);\n  });\n}","map":{"version":3,"sources":["/Users/admin/Documents/projects/ols/xterm-test/src/components/XtermTerminal.js"],"names":["React","Component","render","XTerm","Terminal","XtermTerminal","constructor","props","context","componentDidMount","runFakeTerminal","refs","xterm","componentWillUnmount","mainDeviceComponent","addons","overflow","position","width","height","term","getTerminal","shellprompt","prompt","write","writeln","on","key","ev","printable","altKey","ctrlKey","metaKey","keyCode","data"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,aAAhC;;AAEA,MAAMC,aAAN,SAA4BJ,SAA5B,CAAsC;AACpCK,EAAAA,WAAW,CAACC,KAAD,EAAQC,OAAR,EAAiB;AAC1B,UAAMD,KAAN,EAAaC,OAAb;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,eAAe,CAAC,KAAKC,IAAL,CAAUC,KAAX,CAAf;AACD;;AACDC,EAAAA,oBAAoB,GAAG;AACrB,SAAKF,IAAL,CAAUG,mBAAV,CAA8BD,oBAA9B;AACD;;AAEDX,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAC,OAAX;AAAmB,MAAA,KAAK,EAAE;AACxBa,QAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,YAAR,EAAsB,QAAtB,CADgB;AAExBC,QAAAA,QAAQ,EAAE,QAFc;AAGxBC,QAAAA,QAAQ,EAAE,UAHc;AAIxBC,QAAAA,KAAK,EAAE,MAJiB;AAKxBC,QAAAA,MAAM,EAAE;AALgB,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAWD;;AAxBmC;;AA2BtC,eAAed,aAAf;;AAEA,SAASK,eAAT,CAAyBE,KAAzB,EAAuC;AACrC,QAAMQ,IAAc,GAAGR,KAAK,CAACS,WAAN,EAAvB;AACA,MAAIC,WAAW,GAAG,IAAlB;;AAEA,WAASC,MAAT,GAAmB;AACjBX,IAAAA,KAAK,CAACY,KAAN,CAAY,SAASF,WAArB;AACD;;AACDV,EAAAA,KAAK,CAACa,OAAN,CAAc,qBAAd;AACAb,EAAAA,KAAK,CAACa,OAAN,CAAc,8EAAd;AACAb,EAAAA,KAAK,CAACa,OAAN,CAAc,6CAAd;AACAb,EAAAA,KAAK,CAACa,OAAN,CAAc,EAAd;AACAF,EAAAA,MAAM;AAENH,EAAAA,IAAI,CAACM,EAAL,CAAQ,KAAR,EAAe,UAAUC,GAAV,EAAeC,EAAf,EAAmB;AAChC,QAAIC,SAAS,GACX,CAACD,EAAE,CAACE,MAAJ,IAAc,CAACF,EAAE,CAACG,OAAlB,IAA6B,CAACH,EAAE,CAACI,OADnC;;AAIA,QAAIJ,EAAE,CAACK,OAAH,IAAc,EAAlB,EAAsB;AACpBV,MAAAA,MAAM,GADc,CAEtB;AACA;AACA;AACA;AACA;AACC,KAPD,MAOO,IAAIM,SAAJ,EAAe;AACpBjB,MAAAA,KAAK,CAACY,KAAN,CAAYG,GAAZ;AACD;AACF,GAfD;AAiBAP,EAAAA,IAAI,CAACM,EAAL,CAAQ,OAAR,EAAiB,UAAUQ,IAAV,EAAgBN,EAAhB,EAAoB;AACnChB,IAAAA,KAAK,CAACY,KAAN,CAAYU,IAAZ;AACD,GAFD;AAGD","sourcesContent":["import React, { Component } from 'react'\nimport { render } from 'react-dom'\nimport { XTerm, Terminal } from 'react-xterm'\n\nclass XtermTerminal extends Component {\n  constructor(props, context) {\n    super(props, context)\n  }\n\n  componentDidMount() {\n    runFakeTerminal(this.refs.xterm)\n  }\n  componentWillUnmount() {\n    this.refs.mainDeviceComponent.componentWillUnmount()\n  }\n\n  render() {\n    return (\n      <div>\n        <XTerm ref='xterm' style={{\n          addons: ['fit', 'fullscreen', 'search'],\n          overflow: 'hidden',\n          position: 'relative',\n          width: '100%',\n          height: '100%'\n        }} />\n      </div>\n    )\n  }\n}\n\nexport default XtermTerminal\n\nfunction runFakeTerminal(xterm: XTerm) {\n  const term: Terminal = xterm.getTerminal()\n  var shellprompt = '$ '\n\n  function prompt () {\n    xterm.write('\\r\\n' + shellprompt)\n  }\n  xterm.writeln('Welcome to xterm.js')\n  xterm.writeln('This is a local terminal emulation, without a real terminal in the back-end.')\n  xterm.writeln('Type some keys and commands to play around.')\n  xterm.writeln('')\n  prompt()\n\n  term.on('key', function (key, ev) {\n    var printable = (\n      !ev.altKey && !ev.ctrlKey && !ev.metaKey\n    )\n\n    if (ev.keyCode == 13) {\n      prompt()\n    // } else if (ev.keyCode == 8) {\n    //   // Do not delete the prompt\n    //   if (term['x'] > 2) {\n    //     xterm.write('\\b \\b')\n    //   }\n    } else if (printable) {\n      xterm.write(key)\n    }\n  })\n\n  term.on('paste', function (data, ev) {\n    xterm.write(data)\n  })\n}\n"]},"metadata":{},"sourceType":"module"}